#!/usr/bin/env bash

# TDOC - Tetra Document Manager
# TCS 3.0-compliant module for managing LLM-generated markdown documents

# Strong globals
: "${TDOC_SRC:=$TETRA_SRC/bash/tdoc}"
: "${TDOC_DIR:=$TETRA_DIR/tdoc}"

# Module directories
TDOC_DB_DIR="${TDOC_DIR}/db"
TDOC_CONFIG_DIR="${TDOC_DIR}/config"
TDOC_CACHE_DIR="${TDOC_DIR}/cache"

# Load dependencies
TDS_SRC="${TDS_SRC:-$TETRA_SRC/bash/tds}"
if [[ -f "$TDS_SRC/tds.sh" ]]; then
    source "$TDS_SRC/tds.sh"
else
    echo "Warning: TDS not found at $TDS_SRC - color features disabled" >&2
fi

# Load tree-based help system
if [[ -f "$TETRA_SRC/bash/tree/help.sh" ]]; then
    source "$TETRA_SRC/bash/tree/help.sh"
fi

# Load tdoc components
source "$TDOC_SRC/core/metadata.sh"
source "$TDOC_SRC/core/database.sh"
source "$TDOC_SRC/core/index.sh"
source "$TDOC_SRC/core/classify.sh"
source "$TDOC_SRC/core/search.sh"
source "$TDOC_SRC/core/chuck.sh"
source "$TDOC_SRC/ui/tags.sh"
source "$TDOC_SRC/ui/preview.sh"
source "$TDOC_SRC/ui/interactive.sh"
source "$TDOC_SRC/integrations/rag_evidence.sh"

# Load actions
source "$TDOC_SRC/actions/chuck.sh"

# Build help tree for tdoc
_tdoc_build_help_tree() {
    # Main category
    tree_insert "help.tdoc" category \
        title="Document Manager" \
        help="Manage and categorize LLM-generated markdown documents" \
        detail="TDOC tracks metadata for markdown documents generated by LLMs, providing categorization, search, and RAG integration."

    # Commands
    tree_insert "help.tdoc.init" command \
        title="Initialize document" \
        help="Add metadata to document (interactive or non-interactive)" \
        synopsis="tdoc init <file> [OPTIONS]" \
        handler="tdoc_init_doc" \
        examples="tdoc init bash/rag/docs/NEW_FEATURE.md
tdoc init docs/API_SPEC.md --core --type spec"

    tree_insert "help.tdoc.view" command \
        title="Preview document" \
        help="View document with color rendering and metadata" \
        synopsis="tdoc view <file> [OPTIONS]" \
        handler="tdoc_view_doc" \
        examples="tdoc view bash/rag/docs/REPL_FIXES.md
tdoc view file.md --meta-only"

    tree_insert "help.tdoc.tag" command \
        title="Tag editor" \
        help="Interactive tag editor for documents" \
        synopsis="tdoc tag <file>" \
        handler="tdoc_tag_interactive"

    tree_insert "help.tdoc.list" command \
        title="List documents" \
        help="List all tracked documents with filters (compact format)" \
        synopsis="tdoc list [OPTIONS]" \
        handler="tdoc_list_docs" \
        details="Compact one-line format. Use 'tdoc ls' for detailed preview." \
        examples="tdoc list --core
tdoc list --module rag --tags bug-fix"

    tree_insert "help.tdoc.ls" command \
        title="List with preview" \
        help="List all tracked documents with detailed preview" \
        synopsis="tdoc ls [OPTIONS]" \
        handler="tdoc_list_docs" \
        details="Shows detailed preview with colors, badges, and full paths. Alias for 'tdoc list --preview'." \
        examples="tdoc ls
tdoc ls --core --module rag"

    tree_insert "help.tdoc.search" command \
        title="Search documents" \
        help="Full-text search across all documents" \
        synopsis="tdoc search <query>" \
        handler="tdoc_search_docs" \
        examples="tdoc search 'bash completion system'"

    tree_insert "help.tdoc.evidence" command \
        title="Evidence ranking" \
        help="Get evidence-weighted document list for RAG" \
        synopsis="tdoc evidence <query>" \
        handler="tdoc_evidence_for_query"

    tree_insert "help.tdoc.audit" command \
        title="Audit documents" \
        help="Find documents without metadata" \
        synopsis="tdoc audit" \
        handler="tdoc_audit_docs"

    tree_insert "help.tdoc.index" command \
        title="Index management" \
        help="Show or rebuild document indexes" \
        synopsis="tdoc index [--rebuild]"

    # init flags/options
    tree_insert "help.tdoc.init.--core" flag \
        title="Core document" \
        help="Mark as core document (vs working/temporary)"

    tree_insert "help.tdoc.init.--other" flag \
        title="Other document" \
        help="Mark as other/working document"

    tree_insert "help.tdoc.init.--type" option \
        title="Document type" \
        help="Type of document" \
        completion_values="spec,guide,bug-fix,refactor,plan,summary"

    tree_insert "help.tdoc.init.--tags" option \
        title="Tags" \
        help="Comma-separated tags for categorization"

    tree_insert "help.tdoc.init.--module" option \
        title="Module name" \
        help="Module association (auto-detected if in bash/<module>/)"

    # view flags
    tree_insert "help.tdoc.view.--pager" flag \
        title="Use pager" \
        help="Display output in pager (less)"

    tree_insert "help.tdoc.view.--meta-only" flag \
        title="Metadata only" \
        help="Show only metadata, not content"

    tree_insert "help.tdoc.view.--raw" flag \
        title="Raw output" \
        help="Show raw file with frontmatter"

    # list flags
    tree_insert "help.tdoc.list.--core" flag \
        title="Core only" \
        help="List only core documents"

    tree_insert "help.tdoc.list.--other" flag \
        title="Other only" \
        help="List only other/working documents"

    tree_insert "help.tdoc.list.--preview" flag \
        title="Show preview" \
        help="Display metadata preview for each document"

    tree_insert "help.tdoc.list.--module" option \
        title="Module filter" \
        help="Filter by module name"

    tree_insert "help.tdoc.list.--tags" option \
        title="Tag filter" \
        help="Filter by comma-separated tags"

    # Chuck command
    tree_insert "help.tdoc.chuck" command \
        title="Chuck LLM responses" \
        help="Capture LLM responses as lower-grade technical documentation" \
        synopsis="tdoc chuck <subcommand>" \
        handler="tdoc_action_chuck" \
        details="Chuck stores LLM responses in $TETRA_DIR/tdoc/chuck/ with epoch timestamps.
These are lower-grade docs that can later be promoted to reference documentation." \
        examples="tdoc chuck save tree < llm_response.md
tdoc chuck list --recent 10
tdoc chuck promote 1729950000 docs/reference/tree.md"

    # Chuck subcommands
    tree_insert "help.tdoc.chuck.save" command \
        title="Save LLM response" \
        help="Save LLM response from stdin or file" \
        synopsis="tdoc chuck save <kind> [--from FILE]" \
        examples="echo '...' | tdoc chuck save tree
tdoc chuck save boot --from /tmp/response.md"

    tree_insert "help.tdoc.chuck.list" command \
        title="List chuck documents" \
        help="List chucked documents with optional filters" \
        synopsis="tdoc chuck list [--kind KIND] [--recent N]" \
        examples="tdoc chuck list
tdoc chuck list --kind tree --recent 5"

    tree_insert "help.tdoc.chuck.view" command \
        title="View chuck document" \
        help="Display a chucked document" \
        synopsis="tdoc chuck view <id> | --kind <kind>" \
        examples="tdoc chuck view 1729950000
tdoc chuck view --kind tree"

    tree_insert "help.tdoc.chuck.promote" command \
        title="Promote to reference" \
        help="Promote chuck document to reference directory" \
        synopsis="tdoc chuck promote <id> <dest_path>" \
        examples="tdoc chuck promote 1729950000 docs/reference/tree-design.md"

    tree_insert "help.tdoc.chuck.delete" command \
        title="Delete chuck document" \
        help="Remove a chuck document" \
        synopsis="tdoc chuck delete <id> [--force]" \
        examples="tdoc chuck delete 1729950000"

    tree_insert "help.tdoc.chuck.search" command \
        title="Search chuck documents" \
        help="Full-text search across chuck documents" \
        synopsis="tdoc chuck search <query>" \
        examples="tdoc chuck search 'boot optimization'"
}

# Module initialization
tdoc_module_init() {
    # Create necessary directories
    mkdir -p "$TDOC_DB_DIR" "$TDOC_CONFIG_DIR" "$TDOC_CACHE_DIR"

    # Initialize indexes if they don't exist
    tdoc_index_init

    # Build help tree if tree module is loaded
    if [[ -v TREE_TYPE ]]; then
        _tdoc_build_help_tree
    fi
}

# Module interface functions (for Tetra module system)
tdoc_module_actions() {
    echo "init view tag list search evidence audit chuck"
}

tdoc_module_properties() {
    echo "documents metadata tags indexes database"
}

tdoc_module_info() {
    echo "TDOC - Tetra Document Manager"
    echo "Purpose: Manage and categorize LLM-generated markdown documents"
    local doc_count=$(find "$TDOC_DB_DIR" -name "*.meta" 2>/dev/null | wc -l | tr -d ' ')
    echo "Tracked Documents: $doc_count"
}

# Main tdoc command interface
tdoc() {
    local action="${1:-}"

    if [[ -z "$action" ]]; then
        _tdoc_show_help
        return 0
    fi

    shift || true

    case "$action" in
        init)
            tdoc_init_doc "$@"
            ;;
        view)
            tdoc_view_doc "$@"
            ;;
        tag)
            tdoc_tag_interactive "$@"
            ;;
        list)
            tdoc_list_docs "$@"
            ;;
        ls)
            tdoc_list_docs --preview "$@"
            ;;
        search)
            tdoc_search_docs "$@"
            ;;
        evidence)
            tdoc_evidence_for_query "$@"
            ;;
        audit)
            tdoc_audit_docs "$@"
            ;;
        index)
            case "${1:-}" in
                --rebuild)
                    tdoc_index_rebuild
                    ;;
                *)
                    tdoc_index_status
                    ;;
            esac
            ;;
        chuck)
            tdoc_action_chuck "$@"
            ;;
        help|--help|-h)
            _tdoc_show_help
            ;;
        *)
            echo "Unknown command: $action" >&2
            echo "Try: tdoc help" >&2
            return 1
            ;;
    esac
}

_tdoc_show_help() {
    # Use tree-based help if available and help tree is built
    if declare -F tree_help_show >/dev/null 2>&1 && declare -F tree_get >/dev/null 2>&1; then
        # Check if help tree exists before trying to show it
        if tree_get "help.tdoc" "type" >/dev/null 2>&1; then
            tree_help_show "help.tdoc"
            return 0
        fi
    fi

    # Fallback to basic help
    echo "tdoc - Tetra Document Manager"
    echo ""
    echo "Commands:"
    echo "  init      - Initialize document with metadata"
    echo "  view      - Preview document with rendering"
    echo "  tag       - Interactive tag editor"
    echo "  list      - List tracked documents (compact)"
    echo "  ls        - List tracked documents (detailed preview)"
    echo "  search    - Full-text search"
    echo "  evidence  - Evidence-weighted ranking for RAG"
    echo "  audit     - Find documents without metadata"
    echo "  index     - Manage document indexes"
    echo "  chuck     - Capture LLM responses as docs"
    echo ""
    echo "Try: tdoc <command> --help for details"
    echo ""
    echo "Note: Load 'tree' module for enhanced help: tmod load tree"
}

# Export for use as command
export -f tdoc
