#!/usr/bin/env bash
# text2esto.sh - Simple text-to-phoneme converter
#
# Converts simple English words to .esto phoneme scripts
# Uses a basic letter-to-phoneme mapping (simplified)
#
# Usage: ./text2esto.sh "hello world" > output.esto

text_to_phonemes() {
    local text="$1"
    local pitch="${2:-120}"

    # Convert to lowercase
    text=$(echo "$text" | tr '[:upper:]' '[:lower:]')

    # Output header
    cat <<EOF
# Generated by text2esto.sh
# Text: "$text"

@EMOTION NEUTRAL 0.5
@PITCH $pitch
@RATE 1.0

EOF

    # Process each word
    local word_array=($text)
    for word in "${word_array[@]}"; do
        echo "# \"$word\""

        # Simple phoneme mapping (very basic!)
        local i=0
        local len=${#word}

        while [[ $i -lt $len ]]; do
            local char="${word:$i:1}"
            local next_char="${word:$i+1:1}"
            local phoneme=""
            local duration=100
            local pitch_val=$pitch

            case "$char" in
                # Vowels
                a)
                    if [[ "$next_char" == "e" ]]; then
                        phoneme="e"
                        duration=200
                        ((i++))
                    elif [[ "$next_char" == "i" ]]; then
                        phoneme="e"
                        duration=200
                        ((i++))
                    elif [[ "$next_char" == "y" ]]; then
                        phoneme="e"
                        duration=200
                        ((i++))
                    else
                        phoneme="a"
                        duration=150
                    fi
                    ;;
                e)
                    if [[ "$next_char" == "e" ]]; then
                        phoneme="i"
                        duration=200
                        ((i++))
                    else
                        phoneme="e"
                        duration=150
                    fi
                    ;;
                i)
                    if [[ "$next_char" == "e" ]]; then
                        phoneme="a"
                        duration=200
                        ((i++))
                    else
                        phoneme="i"
                        duration=150
                    fi
                    ;;
                o)
                    if [[ "$next_char" == "o" ]]; then
                        phoneme="u"
                        duration=200
                        ((i++))
                    elif [[ "$next_char" == "u" ]]; then
                        phoneme="u"
                        duration=200
                        ((i++))
                    else
                        phoneme="o"
                        duration=150
                    fi
                    ;;
                u)
                    if [[ "$next_char" == "e" ]]; then
                        phoneme="u"
                        duration=200
                        ((i++))
                    else
                        phoneme="u"
                        duration=150
                    fi
                    ;;

                # Consonants
                b) phoneme="b"; duration=80 ;;
                c)
                    if [[ "$next_char" == "h" ]]; then
                        phoneme="sh"  # Approximate
                        duration=120
                        ((i++))
                    else
                        phoneme="k"
                        duration=70
                    fi
                    ;;
                d) phoneme="d"; duration=70 ;;
                f) phoneme="f"; duration=100 ;;
                g) phoneme="g"; duration=80 ;;
                h) phoneme="h"; duration=70 ;;
                j) phoneme="j"; duration=80 ;;
                k) phoneme="k"; duration=70 ;;
                l) phoneme="l"; duration=100 ;;
                m) phoneme="m"; duration=100 ;;
                n)
                    if [[ "$next_char" == "g" ]]; then
                        phoneme="n"  # Should be 'Å‹' but use 'n'
                        duration=120
                        # Don't skip 'g', will be processed
                    else
                        phoneme="n"
                        duration=100
                    fi
                    ;;
                p) phoneme="p"; duration=70 ;;
                q) phoneme="k"; duration=70 ;;  # Approximate
                r) phoneme="r"; duration=90 ;;
                s)
                    if [[ "$next_char" == "h" ]]; then
                        phoneme="sh"
                        duration=130
                        ((i++))
                    else
                        phoneme="s"
                        duration=110
                    fi
                    ;;
                t)
                    if [[ "$next_char" == "h" ]]; then
                        phoneme="f"  # Approximate 'th' with 'f'
                        duration=100
                        ((i++))
                    else
                        phoneme="t"
                        duration=70
                    fi
                    ;;
                v) phoneme="v"; duration=100 ;;
                w) phoneme="w"; duration=90 ;;
                x) phoneme="k"; duration=70 ;;  # Simplified
                y) phoneme="y"; duration=80 ;;
                z) phoneme="z"; duration=110 ;;

                # Skip silent letters
                *)
                    ((i++))
                    continue
                    ;;
            esac

            # Output phoneme
            if [[ -n "$phoneme" ]]; then
                echo "${phoneme}:${duration}:${pitch_val}"
            fi

            ((i++))
        done

        # Add pause between words
        echo "rest:150:0"
        echo ""
    done

    # Final rest
    echo "rest:300:0"
}

show_usage() {
    cat <<EOF
Simple Text-to-Phoneme Converter

Usage: $0 [options] "<text>"

Options:
  -p, --pitch <hz>    Base pitch (default: 120)
  -o, --output <file> Output file (default: stdout)
  -h, --help          Show this help

Examples:
  $0 "hello world"
  $0 -p 140 "hello world" > hello.esto
  $0 --output greeting.esto "hi there"

Note: This is a VERY simplified phoneme mapper!
For better results, manually edit the .esto file.

EOF
}

main() {
    local text=""
    local pitch=120
    local output=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--pitch)
                pitch="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                text="$1"
                shift
                ;;
        esac
    done

    if [[ -z "$text" ]]; then
        echo "ERROR: No text provided" >&2
        show_usage
        exit 1
    fi

    # Generate .esto script
    if [[ -n "$output" ]]; then
        text_to_phonemes "$text" "$pitch" > "$output"
        echo "Generated: $output" >&2
    else
        text_to_phonemes "$text" "$pitch"
    fi
}

main "$@"
