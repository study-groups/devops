#!/usr/bin/env bash

# QA Logging Wrapper - TCS 4.0 Compliant
# Auto-generated by generate_module_log.sh
# Provides convenience functions for QA module logging

# Ensure unified logging is loaded
if ! type tetra_log_event >/dev/null 2>&1; then
    source "${TETRA_SRC}/bash/utils/unified_log.sh"
fi

# === QA LOGGING WRAPPERS ===

# Generic QA log event
qa_log() {
    tetra_log_event qa "$@"
}

# QA try events
qa_log_try() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_try qa "$verb" "$subject" "$metadata"
}

# QA success events
qa_log_success() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_success qa "$verb" "$subject" "$metadata"
}

# QA fail events
qa_log_fail() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_fail qa "$verb" "$subject" "$metadata"
}

# QA info events
qa_log_info() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_info qa "$verb" "$subject" "$metadata"
}

# QA debug events
qa_log_debug() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_debug qa "$verb" "$subject" "$metadata"
}

# QA warning events
qa_log_warn() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_warn qa "$verb" "$subject" "$metadata"
}

# QA error events
qa_log_error() {
    local verb="$1"
    local subject="$2"
    local metadata="${3:-{}}"
    tetra_log_error qa "$verb" "$subject" "$metadata"
}

# === MODULE-SPECIFIC LOGGING FUNCTIONS ===
# Add your custom logging functions below this line
#
# Example:
# qa_log_operation_try() {
#     local operation_id="$1"
#     local params="$2"
#     local metadata=$(jq -n --arg params "$params" '{params: $params}')
#     qa_log_try "operation" "$operation_id" "$metadata"
# }

# === QUERY HELPERS ===

# Query QA logs
qa_log_query() {
    tetra_log_query_module qa
}

# Query QA errors
qa_log_query_errors() {
    tetra_log_query_module qa | jq -c 'select(.status == "fail" or .level == "ERROR")'
}

# Query specific verb
qa_log_query_verb() {
    local verb="$1"
    tetra_log_query_module qa | jq -c --arg verb "$verb" 'select(.verb == $verb)'
}
