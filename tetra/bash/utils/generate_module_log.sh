#!/usr/bin/env bash

# Generate Module Logging Wrapper
# Creates a standardized module_log.sh file from template

set -euo pipefail

MODULE_NAME="${1:-}"

if [[ -z "$MODULE_NAME" ]]; then
    echo "Usage: generate_module_log.sh <module_name>" >&2
    echo "Example: generate_module_log.sh qa" >&2
    exit 1
fi

# Validate module name (lowercase, alphanumeric, underscores)
if [[ ! "$MODULE_NAME" =~ ^[a-z][a-z0-9_]*$ ]]; then
    echo "Error: Module name must be lowercase alphanumeric with underscores, starting with a letter" >&2
    exit 1
fi

# Determine output path
TETRA_SRC="${TETRA_SRC:-$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)}"
MODULE_DIR="$TETRA_SRC/bash/$MODULE_NAME"
OUTPUT_FILE="$MODULE_DIR/${MODULE_NAME}_log.sh"

# Check if module directory exists
if [[ ! -d "$MODULE_DIR" ]]; then
    echo "Error: Module directory not found: $MODULE_DIR" >&2
    echo "Create the module directory first: mkdir -p $MODULE_DIR" >&2
    exit 1
fi

# Check if log file already exists
if [[ -f "$OUTPUT_FILE" ]]; then
    echo "Warning: $OUTPUT_FILE already exists" >&2
    read -p "Overwrite? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 0
    fi
fi

# Generate the module log wrapper
cat > "$OUTPUT_FILE" <<EOF
#!/usr/bin/env bash

# ${MODULE_NAME^^} Logging Wrapper - TCS 4.0 Compliant
# Auto-generated by generate_module_log.sh
# Provides convenience functions for ${MODULE_NAME^^} module logging

# Ensure unified logging is loaded
if ! type tetra_log_event >/dev/null 2>&1; then
    source "\${TETRA_SRC}/bash/utils/unified_log.sh"
fi

# === ${MODULE_NAME^^} LOGGING WRAPPERS ===

# Generic ${MODULE_NAME^^} log event
${MODULE_NAME}_log() {
    tetra_log_event ${MODULE_NAME} "\$@"
}

# ${MODULE_NAME^^} try events
${MODULE_NAME}_log_try() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_try ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} success events
${MODULE_NAME}_log_success() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_success ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} fail events
${MODULE_NAME}_log_fail() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_fail ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} info events
${MODULE_NAME}_log_info() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_info ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} debug events
${MODULE_NAME}_log_debug() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_debug ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} warning events
${MODULE_NAME}_log_warn() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_warn ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# ${MODULE_NAME^^} error events
${MODULE_NAME}_log_error() {
    local verb="\$1"
    local subject="\$2"
    local metadata="\${3:-{}}"
    tetra_log_error ${MODULE_NAME} "\$verb" "\$subject" "\$metadata"
}

# === MODULE-SPECIFIC LOGGING FUNCTIONS ===
# Add your custom logging functions below this line
#
# Example:
# ${MODULE_NAME}_log_operation_try() {
#     local operation_id="\$1"
#     local params="\$2"
#     local metadata=\$(jq -n --arg params "\$params" '{params: \$params}')
#     ${MODULE_NAME}_log_try "operation" "\$operation_id" "\$metadata"
# }

# === QUERY HELPERS ===

# Query ${MODULE_NAME^^} logs
${MODULE_NAME}_log_query() {
    tetra_log_query_module ${MODULE_NAME}
}

# Query ${MODULE_NAME^^} errors
${MODULE_NAME}_log_query_errors() {
    tetra_log_query_module ${MODULE_NAME} | jq -c 'select(.status == "fail" or .level == "ERROR")'
}

# Query specific verb
${MODULE_NAME}_log_query_verb() {
    local verb="\$1"
    tetra_log_query_module ${MODULE_NAME} | jq -c --arg verb "\$verb" 'select(.verb == \$verb)'
}
EOF

chmod +x "$OUTPUT_FILE"

echo "âœ“ Generated: $OUTPUT_FILE"
echo ""
echo "Next steps:"
echo "1. Source this file in your module's main file:"
echo "   source \"\${MODULE_DIR}/${MODULE_NAME}_log.sh\""
echo ""
echo "2. Add module-specific logging functions to $OUTPUT_FILE as needed"
echo ""
echo "3. Use in your code:"
echo "   ${MODULE_NAME}_log_try \"start\" \"service-name\""
echo "   ${MODULE_NAME}_log_success \"start\" \"service-name\" '{\"pid\":1234}'"
