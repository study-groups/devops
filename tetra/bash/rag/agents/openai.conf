# OpenAI Agent Profile - Optimized for GPT models
# Tailored for GPT-3.5, GPT-4, and GPT-5 behavior patterns

AGENT_NAME="openai"
AGENT_DESCRIPTION="Optimized for OpenAI GPT models"

# OpenAI models respond well to direct, imperative instructions
AGENT_INSTRUCTION_TEMPLATE="Generate code in MULTICAT format following these exact rules:

CRITICAL: Never wrap output in markdown code blocks like \`\`\`
CRITICAL: Start your response immediately with #MULTICAT_START
CRITICAL: Use only relative paths (./src/file.js not /absolute/paths)

Format for each file:
#MULTICAT_START
# dir: ./relative/path
# file: filename.ext
# note: what this file does
#MULTICAT_END
[actual file content with no escaping]

Requirements:
- No explanations or introductions
- No markdown formatting
- Raw MULTICAT format only
- Brief, clear file notes
- Production-ready code

"

# OpenAI-optimized example with clear structure
AGENT_EXAMPLE_TEMPLATE="#MULTICAT_START
# dir: ./src
# file: auth.js
# note: Authentication utilities for OpenAI API
#MULTICAT_END
import axios from 'axios';

class AuthService {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = 'https://api.openai.com/v1';
    }

    async validateToken() {
        try {
            const response = await axios.get(\`\${this.baseURL}/models\`, {
                headers: { 'Authorization': \`Bearer \${this.apiKey}\` }
            });
            return response.status === 200;
        } catch (error) {
            return false;
        }
    }

    getHeaders() {
        return {
            'Authorization': \`Bearer \${this.apiKey}\`,
            'Content-Type': 'application/json'
        };
    }
}

export default AuthService;

#MULTICAT_START
# dir: ./config
# file: openai.config.js
# note: OpenAI API configuration
#MULTICAT_END
export const OPENAI_CONFIG = {
    models: {
        'gpt-4o': { maxTokens: 128000, costPer1k: 0.005 },
        'gpt-4o-mini': { maxTokens: 128000, costPer1k: 0.00015 },
        'gpt-3.5-turbo': { maxTokens: 16385, costPer1k: 0.0015 }
    },
    defaults: {
        temperature: 0.7,
        maxTokens: 2000,
        topP: 1.0,
        frequencyPenalty: 0,
        presencePenalty: 0
    },
    limits: {
        requestsPerMinute: 3500,
        tokensPerMinute: 90000
    }
};
"

# OpenAI-specific preferences
PREFER_CONCISE_OUTPUT="true"
AVOID_VERBOSE_EXPLANATIONS="true"
INCLUDE_CONTEXT_HINTS="false"  # OpenAI models work well without extra hints
MAX_SUGGESTED_FILES="30"       # Can handle slightly larger contexts
CONTEXT_WINDOW_SIZE="150000"   # GPT-5 web interface estimate

# Function to generate OpenAI-specific examples
generate_openai_example() {
    echo "$AGENT_EXAMPLE_TEMPLATE"
}