#!/usr/bin/env bash

# TDOCS - Tetra Document Manager
# TCS 3.0-compliant module for managing LLM-generated markdown documents

# Strong globals - ensure TETRA_DIR is set
if [[ -z "$TETRA_DIR" ]]; then
    TETRA_DIR="${HOME}/.tetra"
fi

: "${TDOCS_SRC:=$TETRA_SRC/bash/tdocs}"
: "${TDOCS_DIR:=$TETRA_DIR/tdocs}"

# Module directories
TDOCS_DB_DIR="${TDOCS_DIR}/db"
TDOCS_CONFIG_DIR="${TDOCS_DIR}/config"
TDOCS_CACHE_DIR="${TDOCS_DIR}/cache"

# Export for subshells
export TDOCS_SRC TDOCS_DIR TDOCS_DB_DIR TDOCS_CONFIG_DIR TDOCS_CACHE_DIR

# Load dependencies
TDS_SRC="${TDS_SRC:-$TETRA_SRC/bash/tds}"
if [[ -f "$TDS_SRC/tds.sh" ]]; then
    source "$TDS_SRC/tds.sh"
else
    echo "Warning: TDS not found at $TDS_SRC - color features disabled" >&2
fi

# Load tree-based help system
if [[ -f "$TETRA_SRC/bash/tree/help.sh" ]]; then
    source "$TETRA_SRC/bash/tree/help.sh"
fi

# Load tdocs components
source "$TDOCS_SRC/core/metadata.sh"
source "$TDOCS_SRC/core/database.sh"
source "$TDOCS_SRC/core/index.sh"
source "$TDOCS_SRC/core/classify.sh"
source "$TDOCS_SRC/core/search.sh"
source "$TDOCS_SRC/core/chuck.sh"
source "$TDOCS_SRC/ui/tags.sh"
source "$TDOCS_SRC/ui/preview.sh"
source "$TDOCS_SRC/ui/interactive.sh"
source "$TDOCS_SRC/integrations/rag_evidence.sh"

# Load actions
source "$TDOCS_SRC/actions/chuck.sh"

# Build help tree for tdocs
_tdocs_build_help_tree() {
    # Main category
    tree_insert "help.tdocs" category \
        title="Document Manager" \
        help="Manage and categorize LLM-generated markdown documents" \
        detail="TDOC tracks metadata for markdown documents generated by LLMs, providing categorization, search, and RAG integration."

    # Commands
    tree_insert "help.tdocs.init" command \
        title="Initialize document" \
        help="Add metadata to document (interactive or non-interactive)" \
        synopsis="tdocs init <file> [OPTIONS]" \
        handler="tdocs_init_doc" \
        examples="tdocs init bash/rag/docs/NEW_FEATURE.md
tdoc init docs/API_SPEC.md --core --type spec"

    tree_insert "help.tdocs.view" command \
        title="Preview document" \
        help="View document with color rendering and metadata" \
        synopsis="tdocs view <file> [OPTIONS]" \
        handler="tdocs_view_doc" \
        examples="tdocs view bash/rag/docs/REPL_FIXES.md
tdoc view file.md --meta-only"

    tree_insert "help.tdocs.tag" command \
        title="Tag editor" \
        help="Interactive tag editor for documents" \
        synopsis="tdocs tag <file>" \
        handler="tdocs_tag_interactive"

    tree_insert "help.tdocs.ls" command \
        title="List documents" \
        help="List all tracked documents with filters and preview" \
        synopsis="tdocs ls [OPTIONS]" \
        handler="tdocs_ls_docs" \
        details="Shows detailed list with color-coded category badges, metadata headers, and full paths." \
        examples="tdocs ls
tdocs ls --core
tdocs ls --module rag
tdocs ls --core --module rag --preview"

    tree_insert "help.tdocs.search" command \
        title="Search documents" \
        help="Full-text search across all documents" \
        synopsis="tdocs search <query>" \
        handler="tdocs_search_docs" \
        examples="tdocs search 'bash completion system'"

    tree_insert "help.tdocs.evidence" command \
        title="Evidence ranking" \
        help="Get evidence-weighted document list for RAG" \
        synopsis="tdocs evidence <query>" \
        handler="tdocs_evidence_for_query"

    tree_insert "help.tdocs.audit" command \
        title="Audit documents" \
        help="Find documents without metadata" \
        synopsis="tdocs audit" \
        handler="tdocs_audit_docs"

    tree_insert "help.tdocs.browse" command \
        title="Interactive browser" \
        help="Launch interactive REPL for browsing documents" \
        synopsis="tdocs browse" \
        details="Hybrid mode REPL: shell commands work directly, /cmd for tdocs commands. Use /help inside REPL for more info." \
        examples="tdocs browse
# Inside REPL:
# /ls                List all docs
# /filter core       Set filter
# /view README.md    View document
# git status         Shell works too!"

    tree_insert "help.tdocs.index" command \
        title="Index management" \
        help="Show or rebuild document indexes" \
        synopsis="tdocs index [--rebuild]"

    # init flags/options
    tree_insert "help.tdocs.init.--core" flag \
        title="Core document" \
        help="Mark as core document (vs working/temporary)"

    tree_insert "help.tdocs.init.--other" flag \
        title="Other document" \
        help="Mark as other/working document"

    tree_insert "help.tdocs.init.--type" option \
        title="Document type" \
        help="Type of document" \
        completion_values="spec,guide,bug-fix,refactor,plan,summary"

    tree_insert "help.tdocs.init.--tags" option \
        title="Tags" \
        help="Comma-separated tags for categorization"

    tree_insert "help.tdocs.init.--module" option \
        title="Module name" \
        help="Module association (auto-detected if in bash/<module>/)"

    # view flags
    tree_insert "help.tdocs.view.--pager" flag \
        title="Use pager" \
        help="Display output in pager (less)"

    tree_insert "help.tdocs.view.--meta-only" flag \
        title="Metadata only" \
        help="Show only metadata, not content"

    tree_insert "help.tdocs.view.--raw" flag \
        title="Raw output" \
        help="Show raw file with frontmatter"

    # list flags
    tree_insert "help.tdocs.list.--core" flag \
        title="Core only" \
        help="List only core documents"

    tree_insert "help.tdocs.list.--other" flag \
        title="Other only" \
        help="List only other/working documents"

    tree_insert "help.tdocs.list.--preview" flag \
        title="Show preview" \
        help="Display metadata preview for each document"

    tree_insert "help.tdocs.list.--module" option \
        title="Module filter" \
        help="Filter by module name"

    tree_insert "help.tdocs.list.--tags" option \
        title="Tag filter" \
        help="Filter by comma-separated tags"

    # Chuck command
    tree_insert "help.tdocs.chuck" command \
        title="Chuck LLM responses" \
        help="Capture LLM responses as lower-grade technical documentation" \
        synopsis="tdocs chuck <subcommand>" \
        handler="tdocs_action_chuck" \
        details="Chuck stores LLM responses in $TETRA_DIR/tdoc/chuck/ with epoch timestamps.
These are lower-grade docs that can later be promoted to reference documentation." \
        examples="tdocs chuck save tree < llm_response.md
tdoc chuck list --recent 10
tdoc chuck promote 1729950000 docs/reference/tree.md"

    # Chuck subcommands
    tree_insert "help.tdocs.chuck.save" command \
        title="Save LLM response" \
        help="Save LLM response from stdin or file" \
        synopsis="tdocs chuck save <kind> [--from FILE]" \
        examples="echo '...' | tdoc chuck save tree
tdoc chuck save boot --from /tmp/response.md"

    tree_insert "help.tdocs.chuck.list" command \
        title="List chuck documents" \
        help="List chucked documents with optional filters" \
        synopsis="tdocs chuck list [--kind KIND] [--recent N]" \
        examples="tdocs chuck list
tdoc chuck list --kind tree --recent 5"

    tree_insert "help.tdocs.chuck.view" command \
        title="View chuck document" \
        help="Display a chucked document" \
        synopsis="tdocs chuck view <id> | --kind <kind>" \
        examples="tdocs chuck view 1729950000
tdoc chuck view --kind tree"

    tree_insert "help.tdocs.chuck.promote" command \
        title="Promote to reference" \
        help="Promote chuck document to reference directory" \
        synopsis="tdocs chuck promote <id> <dest_path>" \
        examples="tdocs chuck promote 1729950000 docs/reference/tree-design.md"

    tree_insert "help.tdocs.chuck.delete" command \
        title="Delete chuck document" \
        help="Remove a chuck document" \
        synopsis="tdocs chuck delete <id> [--force]" \
        examples="tdocs chuck delete 1729950000"

    tree_insert "help.tdocs.chuck.search" command \
        title="Search chuck documents" \
        help="Full-text search across chuck documents" \
        synopsis="tdocs chuck search <query>" \
        examples="tdocs chuck search 'boot optimization'"
}

# Module initialization
tdocs_module_init() {
    # Create necessary directories
    mkdir -p "$TDOCS_DB_DIR" "$TDOCS_CONFIG_DIR" "$TDOCS_CACHE_DIR"

    # Initialize indexes if they don't exist
    tdoc_index_init

    # Build help tree if tree module is loaded
    if [[ -v TREE_TYPE ]]; then
        _tdocs_build_help_tree
    fi
}

# Module interface functions (for Tetra module system)
tdoc_module_actions() {
    echo "init view tag list search evidence audit chuck"
}

tdoc_module_properties() {
    echo "documents metadata tags indexes database"
}

tdoc_module_info() {
    echo "TDOC - Tetra Document Manager"
    echo "Purpose: Manage and categorize LLM-generated markdown documents"
    local doc_count=$(find "$TDOCS_DB_DIR" -name "*.meta" 2>/dev/null | wc -l | tr -d ' ')
    echo "Tracked Documents: $doc_count"
}

# Main tdoc command interface
tdocs() {
    local action="${1:-}"

    if [[ -z "$action" ]]; then
        _tdocs_show_help
        return 0
    fi

    shift || true

    case "$action" in
        init)
            tdocs_init_doc "$@"
            ;;
        view)
            tdocs_view_doc "$@"
            ;;
        tag)
            tdocs_tag_interactive "$@"
            ;;
        ls)
            tdocs_ls_docs "$@"
            ;;
        search)
            tdocs_search_docs "$@"
            ;;
        evidence)
            tdocs_evidence_for_query "$@"
            ;;
        audit)
            tdocs_audit_docs "$@"
            ;;
        discover)
            tdocs_discover_docs "$@"
            ;;
        browse|repl)
            # Launch interactive REPL
            source "$TDOCS_SRC/tdocs_repl.sh"
            tdocs_repl "$@"
            ;;
        index)
            case "${1:-}" in
                --rebuild)
                    tdocs_index_rebuild
                    ;;
                *)
                    tdocs_index_status
                    ;;
            esac
            ;;
        chuck)
            tdoc_action_chuck "$@"
            ;;
        help|--help|-h)
            _tdocs_show_help
            ;;
        *)
            echo "Unknown command: $action" >&2
            echo "Try: tdoc help" >&2
            return 1
            ;;
    esac
}

_tdocs_show_help() {
    # Colors (matching tsm style)
    local C_TITLE='\033[1;36m'
    local C_CAT='\033[1;34m'
    local C_CMD='\033[0;36m'
    local C_GRAY='\033[0;90m'
    local C_NC='\033[0m'

    cat <<EOF
$(echo -e "${C_TITLE}TDOCS${C_NC}") - Tetra Document Manager

$(echo -e "${C_CAT}CATEGORIES${C_NC}")
  $(echo -e "${C_CMD}Core${C_NC}")         init view tag ls
  $(echo -e "${C_CMD}Discovery${C_NC}")    discover audit index
  $(echo -e "${C_CMD}Search${C_NC}")       search evidence
  $(echo -e "${C_CMD}Capture${C_NC}")      chuck (save LLM responses)
  $(echo -e "${C_CMD}Interactive${C_NC}")  browse (REPL mode)

$(echo -e "${C_GRAY}Quick:${C_NC}") tdocs discover --auto-init  $(echo -e "${C_GRAY}# Index all docs${C_NC}")
$(echo -e "${C_GRAY}View: ${C_NC}") tdocs ls --core --preview   $(echo -e "${C_GRAY}# List core docs${C_NC}")
$(echo -e "${C_GRAY}Help: ${C_NC}") tdocs help <command>        $(echo -e "${C_GRAY}# Command details${C_NC}")
EOF
}

# Wrapper functions to bridge tdoc_ (singular) and tdocs_ (plural) naming
# The core functions use tdoc_ but the command interface uses tdocs_

tdocs_ls_docs() {
    tdoc_list_docs "$@"
}

tdocs_view_doc() {
    tdoc_view_doc "$@"
}

tdocs_search_docs() {
    tdoc_search_docs "$@"
}

tdocs_tag_interactive() {
    tdoc_tag_interactive "$@"
}

tdocs_init_doc() {
    tdoc_init_doc "$@"
}

tdocs_audit_docs() {
    tdoc_audit_docs "$@"
}

tdocs_discover_docs() {
    tdoc_discover_docs "$@"
}

tdocs_evidence_for_query() {
    tdoc_evidence_for_query "$@"
}

tdocs_index_rebuild() {
    tdoc_index_rebuild
}

tdocs_index_status() {
    tdoc_index_status
}

# Export wrapper functions
export -f tdocs_ls_docs
export -f tdocs_view_doc
export -f tdocs_search_docs
export -f tdocs_tag_interactive
export -f tdocs_init_doc
export -f tdocs_audit_docs
export -f tdocs_discover_docs
export -f tdocs_evidence_for_query
export -f tdocs_index_rebuild
export -f tdocs_index_status

# Export core functions (needed for REPL and subshells)
export -f tdoc_list_docs
export -f tdoc_view_doc
export -f tdoc_search_docs
export -f tdoc_tag_interactive
export -f tdoc_init_doc
export -f tdoc_audit_docs
export -f tdoc_discover_docs
export -f tdoc_preview_doc
export -f tdoc_render_list_with_preview
export -f tdoc_render_compact
export -f _tdoc_truncate_path
export -f _tdoc_indent_preview
export -f _tdoc_render_bold
export -f _tdoc_style_heading
export -f _tdoc_format_preview_content
export -f tdoc_render_metadata_header
export -f tdoc_render_tag
export -f tdoc_render_tag_list
export -f tdoc_render_category_badge
export -f tdoc_render_type_badge
export -f tdoc_render_status
export -f tdoc_get_metadata
export -f tdoc_parse_frontmatter
export -f tdoc_write_frontmatter
export -f tdoc_has_frontmatter
export -f tdoc_db_create
export -f tdoc_db_get
export -f tdoc_db_get_by_path
export -f tdoc_db_update
export -f tdoc_db_list
export -f tdoc_db_delete
export -f tdoc_index_init
export -f tdoc_index_rebuild
export -f tdoc_index_status
export -f tdoc_detect_module
export -f tdoc_suggest_tags
export -f tdoc_suggest_type
export -f tdoc_suggest_category
export -f tdoc_classify_interactive
export -f tdoc_generate_timestamp
export -f tdoc_get_db_dir
export -f tdoc_get_db_path
export -f tdoc_get_tags_path
export -f tdoc_get_field
export -f _tdoc_yaml_to_json

# Export for use as command
export -f tdocs
