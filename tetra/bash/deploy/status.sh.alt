# =================== tetra_status_generate (with tmpdir guidance) ==================

# Show all generated artifacts for an environment and announce the temporary directory.
# Usage: tetra_status_generate <project_dir> <environment>
tetra_status_generate() {
    local project_dir="$1"
    local environment="$2"
    local tmpdir="${project_dir}/env/generated"
    local gen_env="${tmpdir}/${environment}.role.env"
    local gen_entry="${project_dir}/entrypoints/${environment}.sh"
    local gen_service="${project_dir}/entrypoints/${environment}.service"

    echo "==== tetra_status_generate for '$environment' ===="
    echo "Generated files directory (env): $tmpdir"
    echo "If you clean or rebuild, files may be recreated here."
    for file in "$gen_env" "$gen_entry" "$gen_service"; do
        printf "  %-60s " "$file"
        if [ -f "$file" ]; then
            stat --format="exists | size: %s bytes | mtime: %y | perms: %A" "$file"
        else
            echo "missing"
        fi
    done
    echo "=================================================="
}

# =================== tetra_status_build (with guidance) ==========================

# Show build output status, announce build dir.
# Usage: tetra_status_build <project_dir>
tetra_status_build() {
    local project_dir="$1"
    local build_dir="${project_dir}/build"
    echo "==== tetra_status_build ===="
    echo "Build output directory: $build_dir"
    if [ -d "$build_dir" ]; then
        echo "Files produced by build tools (npm, make, etc) will appear here."
        find "$build_dir" -type f -exec stat --format="  %n | size: %s bytes | mtime: %y | perms: %A" {} \;
    else
        echo "Build directory does not exist: $build_dir"
        echo "Run your build tool (e.g., 'npm run build') to create it."
    fi
    echo "==========================="
}
