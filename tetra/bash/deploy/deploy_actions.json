[
  {
    "id": "ssh_connectivity",
    "name": "SSH Connectivity Setup",
    "description": "Establish SSH connection from dev to staging",
    "steps": [
      {
        "action": "generate_ssh_key",
        "prompt": "Generate SSH key for dev@dev.pixeljamarcade.com",
        "command": "ssh-keygen -t ed25519 -C 'dev@dev.pixeljamarcade.com'"
      },
      {
        "action": "copy_ssh_key",
        "prompt": "Copy SSH public key to staging server",
        "command": "ssh-copy-id staging@staging.pixeljam.com"
      },
      {
        "action": "test_ssh_connection",
        "prompt": "Test SSH connection to staging server",
        "command": "ssh staging@staging.pixeljam.com 'echo \"SSH connection successful\"'"
      }
    ]
  },
  {
    "id": "env_preparation",
    "name": "Environment Preparation",
    "description": "Create staging environment from dev environment",
    "steps": [
      {
        "action": "read_dev_env",
        "prompt": "Locate and read dev.env",
        "command": "cat $HOME/src/pixeljam/pja/arcade/env.sh"
      },
      {
        "action": "create_staging_env",
        "prompt": "Create staging.env based on dev.env",
        "command": "cp $HOME/src/pixeljam/pja/arcade/env.sh $HOME/src/pixeljam/pja/arcade/staging.env"
      },
      {
        "action": "modify_staging_env",
        "prompt": "Modify staging.env with staging-specific variables",
        "command": "vim $HOME/src/pixeljam/pja/arcade/staging.env"
      }
    ]
  },
  {
    "id": "git_sync",
    "name": "Git Synchronization",
    "description": "Synchronize git repository between dev and staging",
    "steps": [
      {
        "action": "git_fetch",
        "prompt": "Fetch all branches and prune",
        "command": "git fetch --all --prune"
      },
      {
        "action": "git_checkout_branch",
        "prompt": "Checkout target branch",
        "command": "git checkout $BRANCH"
      },
      {
        "action": "git_reset_hard",
        "prompt": "Reset to origin branch",
        "command": "git reset --hard origin/$BRANCH"
      },
      {
        "action": "git_push_staging",
        "prompt": "Push to staging branch",
        "command": "git checkout staging && git reset --hard $BRANCH && git push origin staging --force"
      }
    ]
  },
  {
    "id": "deployment_transfer",
    "name": "Deployment Transfer",
    "description": "Transfer necessary files to staging server",
    "steps": [
      {
        "action": "scp_staging_env",
        "prompt": "Copy staging.env to staging server",
        "command": "scp staging.env staging@$HOST_IP:$APP_DIR"
      },
      {
        "action": "scp_pd",
        "prompt": "Copy PD directory to staging server",
        "command": "scp $PD_DIR staging@$HOST_IP:$HOME/pj/pd"
      }
    ]
  },
  {
    "id": "deployment_execution",
    "name": "Deployment Execution",
    "description": "Execute deployment steps on staging server",
    "steps": [
      {
        "action": "backup_nginx",
        "prompt": "Backup Nginx configuration",
        "command": "sudo cp /etc/nginx/sites-enabled/staging.conf /etc/nginx/sites-enabled/staging.conf.bak"
      },
      {
        "action": "node_modules_cleanup",
        "prompt": "Clean up node modules and build directory",
        "command": "rm -rf node_modules && rm -rf build"
      },
      {
        "action": "npm_install",
        "prompt": "Install npm dependencies",
        "command": "npm install"
      },
      {
        "action": "npm_build",
        "prompt": "Build the application",
        "command": "npm run build"
      },
      {
        "action": "update_service",
        "prompt": "Update service configuration",
        "command": "sudo update /etc/serviced/service/arcade-staging.service"
      },
      {
        "action": "update_nginx",
        "prompt": "Update Nginx configuration",
        "command": "sudo update /etc/nginx/sites-enabled/staging.conf"
      }
    ]
  },
  {
    "id": "post_deployment_checks",
    "name": "Post-Deployment Checks",
    "description": "Verify deployment and application status",
    "steps": [
      {
        "action": "check_s3_access",
        "prompt": "Verify S3 access",
        "command": "arcade git s3"
      },
      {
        "action": "check_games_dir",
        "prompt": "Check PJA Games directory",
        "command": "ls -l /home/staging/pj/pja-games"
      },
      {
        "action": "smoke_test",
        "prompt": "Run smoke test",
        "command": "curl http://staging.pixeljam.com/health"
      }
    ]
  }
]
