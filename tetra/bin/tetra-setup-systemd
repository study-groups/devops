#!/usr/bin/env bash

# Tetra Systemd Setup Doctor
# Comprehensive setup script for tetra-as-a-service functionality

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; }

# Detect script location and set TETRA_SRC
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export TETRA_SRC="$(dirname "$SCRIPT_DIR")"
export TETRA_DIR="${TETRA_DIR:-$HOME/tetra}"

log_info "Tetra Systemd Setup Doctor"
log_info "TETRA_SRC: $TETRA_SRC"
log_info "TETRA_DIR: $TETRA_DIR"

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check if running on Linux
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        log_error "systemd services require Linux. Current OS: $OSTYPE"
        exit 1
    fi

    # Check if systemctl is available
    if ! command -v systemctl >/dev/null 2>&1; then
        log_error "systemctl not found. This system does not appear to support systemd."
        exit 1
    fi

    # Check if we can manage user services
    if ! systemctl --user status >/dev/null 2>&1; then
        log_warning "User systemd services may not be available"
        log_info "Continuing with system service setup..."
    fi

    log_success "Prerequisites check passed"
}

# Setup tetra environment
setup_tetra_environment() {
    log_info "Setting up tetra environment..."

    # Check if tetra.sh exists
    if [[ ! -f "$TETRA_DIR/tetra.sh" ]]; then
        log_error "Tetra not initialized. Run tetra setup first."
        log_info "Expected file: $TETRA_DIR/tetra.sh"
        exit 1
    fi

    # Load tetra environment
    source "$TETRA_DIR/tetra.sh"

    # Verify tetra loaded correctly
    if ! declare -f tetra_load_module >/dev/null 2>&1; then
        log_error "Failed to load tetra environment"
        exit 1
    fi

    log_success "Tetra environment loaded successfully"
}

# Setup TSM (Tetra Service Manager)
setup_tsm() {
    log_info "Setting up TSM (Tetra Service Manager)..."

    # Load TSM module
    if ! tetra_load_module "tsm" >/dev/null 2>&1; then
        log_error "Failed to load TSM module"
        exit 1
    fi

    # Run TSM setup
    if tetra_tsm_setup; then
        log_success "TSM setup completed"
    else
        log_error "TSM setup failed"
        exit 1
    fi

    # Verify TSM directories
    local tsm_dirs=("$TETRA_DIR/tsm/logs" "$TETRA_DIR/tsm/pids" "$TETRA_DIR/tsm/processes")
    for dir in "${tsm_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            log_error "Missing TSM directory: $dir"
            exit 1
        fi
    done

    # Create services directories
    mkdir -p "$TETRA_DIR/services/enabled"
    log_success "TSM service directories created"
}

# Verify tetra-daemon executable
verify_daemon() {
    log_info "Verifying tetra-daemon executable..."

    local daemon_path="$TETRA_SRC/bin/tetra-daemon"

    if [[ ! -f "$daemon_path" ]]; then
        log_error "tetra-daemon not found at: $daemon_path"
        exit 1
    fi

    if [[ ! -x "$daemon_path" ]]; then
        log_warning "tetra-daemon not executable, fixing..."
        chmod +x "$daemon_path"
    fi

    log_success "tetra-daemon executable verified"
}

# Install systemd service
install_systemd_service() {
    log_info "Installing systemd service..."

    local service_template="$TETRA_SRC/systemd/tetra.service"
    local service_name="tetra@${USER}.service"
    local service_target="/etc/systemd/system/$service_name"

    if [[ ! -f "$service_template" ]]; then
        log_error "Service template not found: $service_template"
        exit 1
    fi

    # Check if we need sudo for system service installation
    if [[ ! -w "/etc/systemd/system" ]]; then
        log_info "Installing system service (requires sudo)..."

        if ! sudo cp "$service_template" "$service_target"; then
            log_error "Failed to install systemd service"
            exit 1
        fi

        # Reload systemd
        sudo systemctl daemon-reload

        log_success "System service installed: $service_target"
        log_info "Enable with: sudo systemctl enable $service_name"
        log_info "Start with: sudo systemctl start $service_name"
    else
        log_success "Service template available: $service_template"
        log_info "Manual installation: sudo cp $service_template $service_target"
    fi
}

# Test daemon functionality
test_daemon() {
    log_info "Testing daemon functionality..."

    # Test daemon can load environment
    local daemon_path="$TETRA_SRC/bin/tetra-daemon"

    log_info "Testing daemon environment loading..."
    if timeout 5s "$daemon_path" 2>/dev/null; then
        log_warning "Daemon exited (expected for test)"
    else
        local exit_code=$?
        if [[ $exit_code -eq 124 ]]; then
            log_success "Daemon started successfully (test timeout reached)"
        else
            log_error "Daemon failed to start (exit code: $exit_code)"
            return 1
        fi
    fi

    log_success "Daemon functionality test passed"
}

# Display setup summary
display_summary() {
    log_info "Setup Summary"
    echo "===================="
    echo "✅ Prerequisites checked"
    echo "✅ Tetra environment loaded"
    echo "✅ TSM setup completed"
    echo "✅ tetra-daemon verified"
    echo "✅ Systemd service ready"
    echo "✅ Daemon functionality tested"
    echo
    log_info "Next Steps:"
    echo "1. Create service definitions with: tsm save <name> <command>"
    echo "2. Enable services with: tsm enable <service>"
    echo "3. Install systemd service: sudo systemctl enable tetra@${USER}.service"
    echo "4. Start systemd service: sudo systemctl start tetra@${USER}.service"
    echo "5. Check logs with: journalctl -u tetra@${USER}.service -f"
    echo
    log_info "Service directories:"
    echo "  Services: $TETRA_DIR/services/"
    echo "  Enabled: $TETRA_DIR/services/enabled/"
    echo "  TSM Data: $TETRA_DIR/tsm/"
}

# Main setup sequence
main() {
    log_info "Starting Tetra systemd setup..."

    check_prerequisites
    setup_tetra_environment
    setup_tsm
    verify_daemon
    install_systemd_service
    test_daemon
    display_summary

    log_success "Tetra systemd setup completed successfully!"
}

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi