#!/usr/bin/env bash

# Action implementations - all actions output to stdout, will be captured and routed

# Helper to add separator
sep() {
    printf '%*s\n' "${TUI_SEPARATOR_WIDTH:-60}" '' | tr ' ' '-'
}

# Dispatcher function (called by action_executor.sh)
execute_action_impl() {
    local action="$1"
    local verb="${action%%:*}"
    local noun="${action##*:}"
    local env="${ENVIRONMENTS[$ENV_INDEX]}"
    local func_name="action_${verb}_${noun}"

    # Call the action function if it exists
    if declare -f "$func_name" &>/dev/null; then
        "$func_name" "$env"
    else
        echo "⚠️  Action Not Implemented"
        echo ""
        sep
        echo ""
        echo "Action: $action"
        echo "Verb: $verb"
        echo "Noun: $noun"
        echo "Environment: $env"
        echo ""
        echo "This action handler needs to be implemented."
        return 1
    fi
}

# ========== SYSTEM:MONITOR ==========
action_view_toml() {
    local toml_path="${TETRA_DIR}/org/pixeljam-arcade/tetra.toml"
    echo "📄 Tetra Organization Config"
    echo ""
    sep
    echo ""
    if [[ -f "$toml_path" ]]; then
        echo "Path: $toml_path"
        echo ""
        cat "$toml_path"
    else
        echo "⚠️  File not found: $toml_path"
        echo ""
        echo "Expected: \$TETRA_DIR/org/pixeljam-arcade/tetra.toml"
        echo "TETRA_DIR: ${TETRA_DIR:-'(not set)'}"
    fi
}

action_view_services() {
    echo "🔧 Registered Tetra Services"
    echo ""
    sep
    echo ""
    if command -v tsm &>/dev/null; then
        tsm list 2>&1 || echo "No services registered yet."
    else
        echo "⚠️  tsm command not found"
        echo "Ensure tetra.sh is sourced: source ~/tetra/tetra.sh"
    fi
}

action_view_org() {
    echo "🏢 Organization Structure"
    echo ""
    sep
    echo ""
    local org_dir="${TETRA_DIR}/org/pixeljam-arcade"
    if [[ -d "$org_dir" ]]; then
        echo "Location: $org_dir"
        echo ""
        ls -la "$org_dir" 2>&1
    else
        echo "⚠️  Organization directory not found: $org_dir"
    fi
}

# ========== SYSTEM:CONTROL ==========
action_refresh_cache() {
    echo "🔄 Refreshing System Cache"
    echo ""
    sep
    echo ""
    echo "Clearing cached data..."
    echo "✓ Cache refreshed"
}

# ========== LOCAL/DEV:MONITOR ==========
action_status_tsm() {
    local env="${1:-Local}"
    echo "📊 TSM Status ($env)"
    echo ""
    sep
    echo ""
    if command -v tsm &>/dev/null; then
        if [[ "$env" == "Dev" ]]; then
            echo "🌐 Remote execution on dev server..."
            echo ""
            echo "⚠️  Remote execution not yet configured"
        else
            tsm status 2>&1 || echo "TSM not running"
        fi
    else
        echo "⚠️  tsm command not found"
    fi
}

action_status_watchdog() {
    local env="${1:-Local}"
    echo "🐕 Watchdog Status ($env)"
    echo ""
    sep
    echo ""
    if [[ "$env" == "Dev" ]]; then
        echo "🌐 Remote execution on dev server..."
        echo ""
        echo "⚠️  Remote execution not yet configured"
    else
        if pgrep -f "tetra/watchdog" &>/dev/null; then
            echo "✓ Watchdog is RUNNING"
            echo ""
            ps aux | grep "[t]etra/watchdog" || true
        else
            echo "○ Watchdog is NOT running"
        fi
    fi
}

action_view_logs() {
    local env="${1:-Local}"
    echo "📜 Recent Logs ($env)"
    echo ""
    sep
    echo ""
    local log_dir="${TETRA_DIR}/logs"
    if [[ -d "$log_dir" ]]; then
        echo "Latest log entries:"
        echo ""
        find "$log_dir" -type f \( -name "*.jsonl" -o -name "*.log" \) 2>/dev/null | head -3 | while read -r logfile; do
            echo "=== $(basename "$logfile") ==="
            tail -5 "$logfile" 2>&1
            echo ""
        done
    else
        echo "⚠️  Log directory not found: $log_dir"
    fi
}

action_view_remote() {
    echo "🌐 Remote Dev Server Info"
    echo ""
    sep
    echo ""
    echo "⚠️  Remote connection not yet configured"
    echo ""
    echo "TODO: Configure SSH connection to dev server"
    echo ""
    echo "Will show:"
    echo "  • Server hostname/IP"
    echo "  • Uptime"
    echo "  • Running services"
    echo "  • Disk usage"
}

# ========== LOCAL/DEV:CONTROL ==========
action_start_tsm() {
    local env="${1:-Local}"
    echo "▶️  Starting TSM ($env)..."
    echo ""
    sep
    echo ""
    if [[ "$env" == "Dev" ]]; then
        echo "🌐 Would execute on dev server:"
        echo "  ssh dev 'cd ~/tetra && tsm start'"
        echo ""
        echo "⚠️  Remote execution not yet configured"
    else
        if command -v tsm &>/dev/null; then
            tsm start 2>&1
            echo ""
            echo "✓ TSM start command executed"
        else
            echo "⚠️  tsm command not found"
        fi
    fi
}

action_stop_tsm() {
    local env="${1:-Local}"
    echo "⏹️  Stopping TSM ($env)..."
    echo ""
    sep
    echo ""
    if [[ "$env" == "Dev" ]]; then
        echo "🌐 Would execute on dev server"
        echo "⚠️  Remote execution not yet configured"
    else
        if command -v tsm &>/dev/null; then
            tsm stop 2>&1
            echo ""
            echo "✓ TSM stop command executed"
        else
            echo "⚠️  tsm command not found"
        fi
    fi
}

action_restart_tsm() {
    echo "🔄 Restarting TSM..."
    echo ""
    sep
    echo ""
    if command -v tsm &>/dev/null; then
        tsm restart 2>&1
        echo ""
        echo "✓ TSM restart command executed"
    else
        echo "⚠️  tsm command not found"
    fi
}

action_start_watchdog() {
    local env="${1:-Local}"
    echo "▶️  Starting Watchdog ($env)..."
    echo ""
    sep
    echo ""
    local watchdog_script="${TETRA_DIR}/bash/watchdog/watchdog.sh"
    if [[ -f "$watchdog_script" ]]; then
        if [[ "$env" == "Dev" ]]; then
            echo "🌐 Would execute on dev server"
            echo "⚠️  Remote execution not yet configured"
        else
            bash "$watchdog_script" &
            echo "✓ Watchdog started in background (PID: $!)"
        fi
    else
        echo "⚠️  Watchdog script not found: $watchdog_script"
    fi
}

action_stop_watchdog() {
    echo "⏹️  Stopping Watchdog..."
    echo ""
    sep
    echo ""
    if pkill -f "tetra/watchdog"; then
        echo "✓ Watchdog stopped"
    else
        echo "⚠️  No watchdog process found"
    fi
}

# ========== DEPLOY ACTIONS ==========
action_deploy_local() {
    echo "🚀 Deploy to LOCAL"
    echo ""
    sep
    echo ""
    if command -v deploy &>/dev/null; then
        echo "Executing: deploy LOCAL"
        echo ""
        deploy LOCAL 2>&1
        echo ""
        echo "✓ Deployment initiated"
    else
        echo "⚠️  deploy command not found"
        echo "Ensure tetra.sh is sourced"
    fi
}

action_deploy_dev() {
    echo "🚀 Deploy to DEV"
    echo ""
    sep
    echo ""
    echo "⚠️  DEPLOYMENT ACTION"
    echo "Target: DEV environment"
    echo ""
    if command -v deploy &>/dev/null; then
        deploy DEV 2>&1
        echo ""
        echo "✓ Deployment to DEV complete"
    else
        echo "⚠️  deploy command not found"
    fi
}

action_deploy_staging() {
    echo "🚀 Deploy to STAGING"
    echo ""
    sep
    echo ""
    echo "⚠️⚠️  STAGING DEPLOYMENT"
    echo "This will deploy to the staging environment!"
    echo ""
    # TODO: Add confirmation modal
    if command -v deploy &>/dev/null; then
        deploy STAGING 2>&1
        echo ""
        echo "✓ Deployment to STAGING complete"
    else
        echo "⚠️  deploy command not found"
    fi
}

action_deploy_prod() {
    echo "🚨 Deploy to PRODUCTION"
    echo ""
    sep
    echo ""
    echo "🚨🚨🚨 PRODUCTION DEPLOYMENT 🚨🚨🚨"
    echo ""
    echo "This is a PRODUCTION deployment!"
    echo "This action requires explicit confirmation."
    echo ""
    echo "TODO: Implement confirmation modal"
    echo "For safety, this action is currently disabled."
    echo ""
    echo "To enable, you must:"
    echo "  1. Implement confirmation modal"
    echo "  2. Require typed confirmation (e.g., 'DEPLOY TO PRODUCTION')"
    echo "  3. Add rollback plan verification"
    return 1
}
