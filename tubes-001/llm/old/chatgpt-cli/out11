#MULTICAT_START
# dir: /Users/mricos/src/mricos/demos/tubes
# file: STATUS
# notes: Header missing because m.width is 0 until first WindowSizeMsg; View() short-circuited and never rendered header. Fix by clamping width in View() and seeding initial width/height in initialModel().
#MULTICAT_END
{
  "files": [
    "/Users/mricos/src/mricos/demos/tubes/STATUS",
    "/Users/mricos/src/mricos/demos/tubes/internal/tui/view.go",
    "/Users/mricos/src/mricos/demos/tubes/internal/tui/model.go"
  ],
  "previous_names": [],
  "current_names": [
    "/Users/mricos/src/mricos/demos/tubes/internal/tui/view.go",
    "/Users/mricos/src/mricos/demos/tubes/internal/tui/model.go"
  ]
}
#MULTICAT_START
# dir: /Users/mricos/src/mricos/demos/tubes/internal/tui
# file: view.go
# notes: Clamp width to a sane default so header renders before first WindowSizeMsg.
#MULTIDIFF_START
@@ REPLACE ^func \(m \*Model\) View\(\) string \{[^\}]+\}@@
func (m *Model) View() string {
	// Use a safe default width before the first WindowSizeMsg arrives.
	w := m.width
	if w <= 0 {
		w = 80
	}
	s := buildStyles(m)
	l := m.computeLayout()

	// header
	title := "Tubes — mode: self"
	if m.curMode == modeTasks {
		title = "Tubes — mode: tasks"
	}
	header := s.header.Width(w).Render(title)

	// columns
	leftStyle := s.colBox
	rightStyle := s.colBox
	if m.activePane == leftPane {
		leftStyle = s.colBoxAct
	}
	if m.activePane == rightPane {
		rightStyle = s.colBoxAct
	}

	left := leftStyle.
		Width(l.LeftW - 2).
		Height(l.ColsH).
		Render(strings.Join(m.leftContent, "\n"))

	right := rightStyle.
		Width(l.RightW - 2).
		Height(l.ColsH).
		Render(m.rightVP.View())

	cols := lipgloss.JoinHorizontal(lipgloss.Top, left, right)

	// cli
	cli := s.cli.Width(w - 2).Height(m.cliH).Render(m.repl.View())

	// status
	statusText := "Ready"
	if m.lastCompile != "" {
		statusText = "Last: " + m.lastCompile
	}
	status := s.status.Width(w - 2).Height(m.statusH).Render(statusText)

	// footer
	footer := m.renderFooter(s, w)

	return lipgloss.JoinVertical(lipgloss.Left,
		header,
		cols,
		cli,
		status,
		footer,
	)
}
#MULTIDIFF_END
#MULTICAT_END
#MULTICAT_START
# dir: /Users/mricos/src/mricos/demos/tubes/internal/tui
# file: model.go
# notes: Seed initial width/height to ensure non-zero layout on first render.
#MULTIDIFF_START
@@ REPLACE ^func initialModel\(port string\) Model \{[^\}]+\}@@
func initialModel(port string) Model {
	ta := textarea.New()
	ta.Placeholder = "Type a /command and press Enter..."
	ta.Focus()
	ta.Prompt = "┃ "
	ta.CharLimit = 4096
	ta.SetHeight(1)
	ta.KeyMap.InsertNewline.SetEnabled(false)

	cwd, _ := os.Getwd()
	td := os.Getenv("TUBES_DIR")

	themes := map[string]Theme{"default": defaultTheme()}
	m := Model{
		repl:         ta,
		activePane:   replPane,
		themes:       themes,
		currentTheme: themes["default"],
		themeName:    "default",
		apiPort:      port,
		footerHelp:   "Tab: cycle | ←/→: resize cols | ↑/↓ (Alt): resize bands | /mode | /open <path> | /run <action>",
		col1Ratio:    0.38,
		headerH:      1,
		cliH:         3,
		statusH:      1,
		footerH:      1,
		curMode:      modeSelf,
		projectRoot:  cwd,
		tubesDir:     td,
		// Seed non-zero size so header/frames render immediately.
		width:       80,
		height:      24,
		// async logging defaults (if present elsewhere in file, keep them)
		logCh:        make(chan logEntry, 1024),
		logDrainRate: 64,
		logCap:       2000,
	}
	m.reloadLeft()
	m.renderRight(m.selectedPath)
	m.loadCommands()
	return m
}
#MULTIDIFF_END
#MULTICAT_END
