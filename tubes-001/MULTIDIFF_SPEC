MULTIDIFF Specification

Goals
- Retain MULTICATâ€™s file addressing, but allow surgical edits.
- Enable deterministic, tooling-friendly application via sed/awk/ed.
- Default remains full-file MULTICAT; MULTIDIFF is opt-in.

Container
A MULTIDIFF file is a sequence of edit blocks. Each block targets one file.

#MULTIDIFF_START
# dir: <dir-of-target-file>
# file: <relative-path>
# base: <optional ref (commit/tag) or SHA>     # informational
# hash: <optional pre-apply SHA256 of file>    # informational
# notes: <free text>
#MULTIDIFF_END
<one or more edit commands>

Multiple blocks can target the same file; edits must be ordered from highest start line to lowest to keep line numbers stable.

Commands
All commands are 7-bit ASCII; payloads are raw text between fences.

REPLACE a line range (inclusive):
@@ REPLACE L1 L2 @@
<<<
<replacement text>
>>>

- If L1 > L2: invalid.
- If payload is empty (<<< followed immediately by >>>): delete range.

INSERT text after a line:
@@ INSERT_AFTER L @@
<<<
<text to insert after line L>
>>>

- Use L=0 to insert at start-of-file.

DELETE a line range:
@@ DELETE L1 L2 @@

Notes
- Lines are 1-based.
- Apply order: by file, sort commands by (start_line desc, end_line desc).
- Newlines in payload are preserved exactly.

Conversion from git diff
Heuristic mapping (new-file side line numbers used):

- Hunk header: @@ -a,b +c,d @@
- Gather hunk body categories:
  + lines only => INSERT_AFTER (c-1)
  - lines only => DELETE c c+(b-1)
  mixed + and - => REPLACE c (c+d-1) with + payload
- Use --unified=0 for minimal ambiguity.
- Rename/copy detection is not encoded.

