diff --git a/devpages/pdata/utils/PathManager.js b/devpages/pdata/utils/PathManager.js
index 9ea4bab..1832758 100644
--- a/devpages/pdata/utils/PathManager.js
+++ b/devpages/pdata/utils/PathManager.js
@@ -18,25 +18,25 @@ class PathManager {
         if (!this.dataRoot) {
             throw new Error('PathManager requires dataRoot (PD_DIR) to be specified');
         }
-        
+
         // Content root is dataRoot/data (effectively MD_DIR)
         this.contentRoot = path.join(this.dataRoot, 'data');
         this.uploadsDir = path.join(this.dataRoot, 'uploads');
-        
+
         // Pre-compute common paths
         this.usersDir = path.join(this.contentRoot, 'users');
         this.projectsDir = path.join(this.contentRoot, 'projects');
-        
+
         // Store user roles map
         this.roles = config.roles || new Map();
-        
+
         // ADD THIS: Permissive symlinks flag - set to true to allow any symlink target
         this.permissiveSymlinks = true; // <-- SET THIS TO true TO ENABLE
         
         // Cache for user top directories
         this.userTopDirsCache = new Map();
     }
-    
+
     /**
      * Reset the user top directory cache for a specific user or all users
      * @param {string} [username] - Username to reset, or all users if not specified
@@ -48,7 +48,7 @@ class PathManager {
             this.userTopDirsCache.clear();
         }
     }
-    
+
     /**
      * Determine the top directory for a user
      * @param {string} username - User to find top directory for
@@ -59,14 +59,14 @@ class PathManager {
         if (this.userTopDirsCache.has(username)) {
             return this.userTopDirsCache.get(username);
         }
-        
+
         // Check both possible locations
         const userDir = path.join(this.usersDir, username);
         const projectDir = path.join(this.projectsDir, username);
-        
+
         let topDir = null;
         let rootPath = null;
-        
+
         // Prefer projects over users if both exist
         if (await this._dirExists(projectDir)) {
             topDir = `projects/${username}`;
@@ -80,13 +80,13 @@ class PathManager {
             topDir = `users/${username}`;
             rootPath = userDir;
         }
-        
+
         const result = { topDir, rootPath };
         // Cache the result
         this.userTopDirsCache.set(username, result);
         return result;
     }
-    
+
     /**
      * Check if a user has permission to perform an action on a resource
      * @param {string} username - Username to check
@@ -103,14 +103,14 @@ class PathManager {
         if (!path.isAbsolute(resourcePath)) {
             return false;
         }
-        
+
         const role = this.roles.get(username);
-        
+
         // Special case for uploads directory - allow access for all users
         if (resourcePath === this.uploadsDir || resourcePath.startsWith(this.uploadsDir + path.sep)) {
             return true;
         }
-        
+
         // ADD THIS: Permissive symlinks check
         if (isSymlinkTarget && this.permissiveSymlinks) {
             // Allow read/list operations to any symlink target when permissive mode is enabled
@@ -131,17 +131,17 @@ class PathManager {
             }
             return false;
         }
-        
+
         // Regular user role check
         if (role === 'user') {
             // Get the user's top directory
             const { rootPath: userTopDir } = await this.findUserTopDir(username);
-            
+
             // Direct access to user's own directory
             if (resourcePath === userTopDir || resourcePath.startsWith(userTopDir + path.sep)) {
                 return true;
             }
-            
+
             // Symlink target permission check - looser for read, stricter for write
             if (isSymlinkTarget) {
                 if (action === 'read' || action === 'list') {
@@ -160,7 +160,7 @@ class PathManager {
                 }
                 return false;
             }
-            
+
             // Check if the resource is within the content root (for non-symlink targets)
             if (resourcePath.startsWith(this.contentRoot + path.sep) || resourcePath === this.contentRoot) {
                 // For read/list actions, allow access to top-level directories
@@ -174,11 +174,11 @@ class PathManager {
                 }
             }
         }
-        
+
         // Default deny
         return false;
     }
-    
+
     /**
      * Resolve a relative path to an absolute path for a user
      * @param {string} username - Username
@@ -191,37 +191,37 @@ class PathManager {
         if (!userRole) {
             throw new Error(`User role not found for ${username}`);
         }
-        
+
         // Normalize and sanitize the input path
         const normalizedClientPath = path.posix.normalize(inputPath || '.').replace(/^(\\.\\.[\\/\\\\])+/, '');
-        
+
         // Special case for uploads directory
         if (normalizedClientPath === 'uploads' || normalizedClientPath.startsWith('uploads/')) {
             const uploadsPath = path.join(this.dataRoot, normalizedClientPath);
             return uploadsPath;
         }
-        
+
         // Admin path resolution
         if (userRole === 'admin') {
             // Admin paths are relative to contentRoot (MD_DIR)
             const resolvedAdminPath = path.join(this.contentRoot, normalizedClientPath);
-            
+
             // Security check to prevent path traversal
             const resolvedContentRoot = path.resolve(this.contentRoot);
             if (!path.resolve(resolvedAdminPath).startsWith(resolvedContentRoot + path.sep) && 
                 path.resolve(resolvedAdminPath) !== resolvedContentRoot) {
                 throw new Error('Security Violation: Path escape attempt detected.');
             }
-            
+
             return resolvedAdminPath;
         }
-        
+
         // Regular user path resolution
         const { topDir, rootPath: userRootOnFs } = await this.findUserTopDir(username);
-        
+
         // Determine if this is a path to the user's root or within it
         let finalPathOnFs;
-        
+
         // Handle paths like '.' or 'users/username' or 'projects/username'
         if (normalizedClientPath === '.' || normalizedClientPath === topDir) {
             finalPathOnFs = userRootOnFs;
@@ -245,17 +245,17 @@ class PathManager {
         else {
             throw new Error(`Access Denied: Path '${inputPath}' is invalid or outside your allowed directory.`);
         }
-        
+
         // Final security check
         const resolvedFinalPath = path.resolve(finalPathOnFs);
         const resolvedUserRoot = path.resolve(userRootOnFs);
         if (!resolvedFinalPath.startsWith(resolvedUserRoot + path.sep) && resolvedFinalPath !== resolvedUserRoot) {
             throw new Error('Security Violation: Attempt to access path outside user scope.');
         }
-        
+
         return finalPathOnFs;
     }
-    
+
     /**
      * Handle symlink resolution and permission checking
      * @param {string} username - Username
@@ -268,17 +268,17 @@ class PathManager {
         let isSymlink = false;
         let targetPath = null;
         let canAccess = false;
-        
+
         try {
             const stats = await fs.lstat(absolutePath);
-            
+
             if (stats.isSymbolicLink()) {
                 isSymlink = true;
-                
+
                 // Get the target path
                 const linkTarget = await fs.readlink(absolutePath);
                 targetPath = path.resolve(path.dirname(absolutePath), linkTarget);
-                
+
                 // Check permissions on the target
                 canAccess = await this.can(username, action, targetPath, true);
             }
@@ -288,10 +288,10 @@ class PathManager {
             targetPath = null;
             canAccess = false;
         }
-        
+
         return { isSymlink, targetPath, canAccess };
     }
-    
+
     /**
      * Get available top-level directories for a user
      * @param {string} username - Username to get directories for
@@ -299,32 +299,42 @@ class PathManager {
      */
     async getAvailableTopDirs(username) {
         const role = this.roles.get(username);
-        
+
         if (role === 'admin') {
             // Admins can see all top-level directories in both users and projects
             try {
                 const userEntries = await this._readDirIfExists(this.usersDir);
                 const projectEntries = await this._readDirIfExists(this.projectsDir);
-                
-                // Filter out dot files and combine results
+
+                // Return just the directory names, not full paths
                 const allDirs = [
-                    ...userEntries.map(entry => `users/${entry}`),
-                    ...projectEntries.map(entry => `projects/${entry}`)
-                ];
-                
-                return allDirs.sort();
+                    ...userEntries,
+                    ...projectEntries
+                ].filter(entry => entry && entry.trim());
+
+                return allDirs;
             } catch (error) {
+                console.error('Error getting available top directories for admin:', error);
                 return [];
             }
-        } else if (role === 'user') {
+        } else {
             // Regular users can only see their own directory
-            const { topDir } = await this.findUserTopDir(username);
-            return [topDir];
+            try {
+                const userDir = path.join(this.usersDir, username);
+                const exists = await this._exists(userDir);
+                
+                if (exists) {
+                    return [username];
+                } else {
+                    return [];
+                }
+            } catch (error) {
+                console.error(`Error getting available top directories for user ${username}:`, error);
+                return [];
+            }
         }
-        
-        return [];
     }
-    
+
     /**
      * Check if a directory exists
      * @param {string} dirPath - Directory path to check
@@ -339,7 +349,7 @@ class PathManager {
             return false;
         }
     }
-    
+
     /**
      * Read directory entries if it exists, otherwise return empty array
      * @param {string} dirPath - Directory to read
@@ -354,6 +364,4 @@ class PathManager {
             return [];
         }
     }
-}
-
-export { PathManager };
\ No newline at end of file
+}
\ No newline at end of file
