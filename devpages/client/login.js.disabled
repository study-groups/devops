// login.js - Handles authentication UI and login state
import { logMessage } from './log/index.js';

/**
 * Updates the authentication UI to reflect the current login state
 */
export function updateAuthUI() {
    try {
        const authState = JSON.parse(localStorage.getItem('authState') || '{}');
        const loginForm = document.getElementById('login-form');
        const pwdDisplay = document.getElementById('pwd-display');
        const logoutBtn = document.getElementById('logout-btn');
        
        if (authState && authState.isLoggedIn) {
            // User is logged in - hide form, show user info
            if (loginForm) loginForm.style.display = 'none';
            if (pwdDisplay) {
                pwdDisplay.style.display = 'inline-block';
                pwdDisplay.textContent = authState.username ? 
                    `Logged in as: ${authState.username}` : 'Logged in';
            }
            if (logoutBtn) logoutBtn.style.display = 'inline-block';
            
            // Critical: Set data attribute on body for CSS rules
            document.body.setAttribute('data-auth-state', 'logged-in');
            
            logMessage('[AUTH] UI updated for logged-in user');
        } else {
            // User is not logged in - show form, hide user info
            if (loginForm) loginForm.style.display = 'flex';
            if (pwdDisplay) pwdDisplay.style.display = 'none';
            if (logoutBtn) logoutBtn.style.display = 'none';
            
            // Critical: Set data attribute on body for CSS rules
            document.body.setAttribute('data-auth-state', 'logged-out');
            
            logMessage('[AUTH] UI updated for guest user');
        }
    } catch (e) {
        console.error('[AUTH] Error updating auth UI:', e);
    }
}

/**
 * Set up login form handler that properly updates UI after login
 */
export function setupLoginForm() {
    const loginForm = document.getElementById('login-form');
    if (!loginForm) {
        logMessage('[AUTH] Login form not found');
        return;
    }
    
    // Clear any existing handlers by cloning the form
    const newLoginForm = loginForm.cloneNode(true);
    loginForm.parentNode.replaceChild(newLoginForm, loginForm);
    
    // Set up form submission handler
    newLoginForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (!username || !password) {
            alert('Please enter both username and password');
            return false;
        }
        
        // Save auth state to localStorage
        localStorage.setItem('authState', JSON.stringify({
            isLoggedIn: true,
            username,
            hashedPassword: btoa(password),
            expiresAt: Date.now() + (24 * 60 * 60 * 1000) // 24 hours from now
        }));
        
        logMessage(`[AUTH] Login successful for ${username}`);
        
        // Update UI immediately - this is critical
        updateAuthUI();
        
        // Then reload the page to refresh everything
        setTimeout(() => {
            logMessage('[AUTH] Reloading page after login');
            window.location.href = window.location.origin + window.location.pathname;
        }, 100);
        
        return false;
    });
    
    logMessage('[AUTH] Login form handler setup complete');
}

/**
 * Set up logout button handler
 */
export function setupLogoutButton() {
    const logoutBtn = document.getElementById('logout-btn');
    if (!logoutBtn) {
        logMessage('[AUTH] Logout button not found');
        return;
    }
    
    // Clear any existing handlers
    const newLogoutBtn = logoutBtn.cloneNode(true);
    logoutBtn.parentNode.replaceChild(newLogoutBtn, logoutBtn);
    
    // Set up click handler
    newLogoutBtn.addEventListener('click', function() {
        logMessage('[AUTH] Logout button clicked');
        
        // Clear auth state
        localStorage.removeItem('authState');
        
        // Update UI immediately
        updateAuthUI();
        
        // Reload page
        setTimeout(() => {
            logMessage('[AUTH] Reloading page after logout');
            window.location.href = window.location.origin + window.location.pathname;
        }, 100);
    });
    
    logMessage('[AUTH] Logout button handler setup complete');
}

/**
 * Initialize authentication system
 */
export function initLogin() {
    logMessage('[AUTH] Initializing authentication system');
    
    // Check current login state
    updateAuthUI();
    
    // Set up form and button handlers
    setupLoginForm();
    setupLogoutButton();
    
    logMessage('[AUTH] Authentication system initialized');
}

// Initialize when the DOM is ready
document.addEventListener('DOMContentLoaded', initLogin);

// Export functions for external use
export default {
    initLogin,
    updateAuthUI,
    setupLoginForm,
    setupLogoutButton
};
