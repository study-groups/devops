// DEPRECATED: This file is being phased out in favor of authService.js
// Please use the new implementation for any new code

// Import necessary utilities
import { logMessage } from "./log/index.js";
import { eventBus } from './eventBus.js';
import { clearFileSystemState } from './fileManager/fileSystemState.js';
import { initializeFileManager } from './fileManager/index.js';

// Import from authService.js but with deferred execution
let AUTH_STATE;
let serviceHandleLogin;
let serviceLogout;
let serviceRestoreLoginState;
let serviceSaveAuthState;
let serviceGetAuthHeaders;
let hashPasswordWithSalt;

// Initialize function to load dependencies safely
async function initAuthDependencies() {
    const authService = await import('./authService.js');
    AUTH_STATE = authService.AUTH_STATE;
    serviceHandleLogin = authService.serviceHandleLogin;
    serviceLogout = authService.serviceLogout;
    serviceRestoreLoginState = authService.serviceRestoreLoginState;
    serviceSaveAuthState = authService.serviceSaveAuthState;
    serviceGetAuthHeaders = authService.serviceGetAuthHeaders;
    hashPasswordWithSalt = authService.hashPasswordWithSalt;
    
    logMessage('[AUTH] Auth.js dependencies loaded');
    return true;
}

// Export auth state getter to avoid direct reference
export function getAuthState() {
    return AUTH_STATE;
}

// For backward compatibility, keep the original state reference
export const authState = {};

// Update authState properties from AUTH_STATE
function syncAuthState() {
    if (AUTH_STATE) {
        Object.assign(authState, AUTH_STATE);
    }
}

// Hash password simple version (keep for backward compatibility)
export async function hashPassword(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// Handle login
export async function handleLogin(username, password) {
    await initAuthDependencies();
    const result = await serviceHandleLogin(username, password);
    syncAuthState();
    
    if (result) {
        // Initialize file manager on successful login
        try {
            const fileManager = await import('./fileManager/index.js');
            await fileManager.initializeFileManager();
            logMessage('[AUTH] File manager initialized after successful login');
            
            // Emit event for other components
            eventBus.emit('auth:loginComplete', {
                username: AUTH_STATE.username
            });
            
            // Clean URL after login
            cleanUrlAfterLogin();
        } catch (e) {
            logMessage(`[AUTH ERROR] Failed to initialize file manager: ${e.message}`);
        }
    }
    
    return result;
}

// Function to clear the editor interface on logout
function clearEditorInterface() {
    try {
        // Clear the editor textarea
        const editorTextarea = document.querySelector('#md-editor textarea');
        if (editorTextarea) {
            editorTextarea.value = '';
            logMessage('[AUTH] Cleared editor content');
        }
        
        // Clear the preview
        const preview = document.getElementById('md-preview');
        if (preview) {
            preview.innerHTML = '';
            logMessage('[AUTH] Cleared preview content');
        }
        
        // Clear file and directory selects
        const fileSelect = document.getElementById('file-select');
        if (fileSelect) {
            // Keep only the first option
            while (fileSelect.options.length > 1) {
                fileSelect.remove(1);
            }
            fileSelect.selectedIndex = 0;
            logMessage('[AUTH] Cleared file select');
        }
        
        const dirSelect = document.getElementById('dir-select');
        if (dirSelect) {
            // Keep only the first option
            while (dirSelect.options.length > 1) {
                dirSelect.remove(1);
            }
            dirSelect.selectedIndex = 0;
            logMessage('[AUTH] Cleared directory select');
        }
        
        // Update the UI to reflect logged out state
        document.body.setAttribute('data-auth-state', 'logged-out');
        
        logMessage('[AUTH] Editor interface cleared');
    } catch (error) {
        logMessage(`[AUTH ERROR] Failed to clear editor interface: ${error.message}`);
        console.error('[AUTH ERROR]', error);
    }
}

// Simple UI update function
function updateAuthDisplay() {
    try {
        // Basic implementation to update UI based on auth state
        if (!AUTH_STATE) return;
        
        const isLoggedIn = AUTH_STATE.isLoggedIn;
        const username = AUTH_STATE.username;
        
        // Update body attribute
        document.body.setAttribute('data-auth-state', isLoggedIn ? 'logged-in' : 'logged-out');
        
        // Update login/logout buttons
        const loginForm = document.getElementById('login-form');
        const logoutBtn = document.getElementById('logout-btn');
        
        if (loginForm) {
            loginForm.style.display = isLoggedIn ? 'none' : 'block';
        }
        
        if (logoutBtn) {
            logoutBtn.style.display = isLoggedIn ? 'inline-block' : 'none';
        }
        
        // Update username display
        const displayElement = document.getElementById('pwd-display');
        if (displayElement && isLoggedIn) {
            const remainingTime = Math.round((AUTH_STATE.expiresAt - Date.now()) / 1000 / 60);
            displayElement.textContent = `${username} (${remainingTime}m)`;
        } else if (displayElement) {
            displayElement.textContent = '';
        }
        
        logMessage('[AUTH] UI updated to reflect auth state');
    } catch (error) {
        console.error('Error updating auth display:', error);
        logMessage('[AUTH ERROR] Failed to update UI');
    }
}

// Log out - with UI updates
export async function logout(silent = false) {
    try {
        await initAuthDependencies();
        // Call the service implementation
        await serviceLogout(silent);
        
        // Additional functionality
        clearEditorInterface();
        
        // Update UI
        updateAuthDisplay();
        
        if (!silent) {
            logMessage('[AUTH] Logged out successfully');
        }
        return true;
    } catch (error) {
        logMessage(`[AUTH ERROR] Logout failed: ${error.message}`);
        console.error('[AUTH ERROR]', error);
        return false;
    }
}

// Alias for backward compatibility
export const logoutEnhanced = logout;

// Re-export functions from authService.js with the original names
export function saveAuthState() {
    if (serviceSaveAuthState) {
        serviceSaveAuthState();
        syncAuthState();
    }
}

export async function restoreLoginState() {
    return initAuthDependencies()
        .then(() => serviceRestoreLoginState())
        .then(async result => {
            syncAuthState();
            
            // Update UI if needed
            if (document.readyState === 'complete' || document.readyState === 'interactive') {
                try {
                    updateAuthDisplay();
                } catch (e) {
                    console.error('Error updating auth display:', e);
                }
            }
            
            // Initialize file manager if logged in
            if (result) {
                try {
                    const fileManager = await import('./fileManager/index.js');
                    await fileManager.initializeFileManager();
                    logMessage('[AUTH] File manager initialized after login state restored');
                    
                    // Emit event for other components
                    eventBus.emit('auth:loginComplete', {
                        username: AUTH_STATE.username
                    });
                } catch (e) {
                    logMessage(`[AUTH ERROR] Failed to initialize file manager: ${e.message}`);
                }
            }
            
            return result;
        });
}

export function getAuthHeaders() {
    if (serviceGetAuthHeaders) {
        return serviceGetAuthHeaders();
    }
    
    // Fallback to localStorage
    try {
        const authStateStr = localStorage.getItem('authState');
        if (authStateStr) {
            const storedAuth = JSON.parse(authStateStr);
            if (storedAuth.isLoggedIn && storedAuth.username && storedAuth.hashedPassword) {
                return {
                    'Authorization': `Basic ${btoa(`${storedAuth.username}:${storedAuth.hashedPassword}`)}`
                };
            }
        }
    } catch (e) {
        console.error('Error getting auth headers:', e);
    }
    
    return {};
}

// Initialize auth system state
let authInitialized = false;
let handlersAttached = false;

// Initialize authentication system
export async function initializeAuth() {
    if (authInitialized) {
        console.log('[AUTH] Already initialized, skipping');
        return;
    }

    logMessage('[AUTH] Initializing authentication system');
    
    try {
        // Use the imported restoreLoginState
        await initAuthDependencies();
        await serviceRestoreLoginState();
        syncAuthState();
        
        // Update UI based on auth state
        updateAuthDisplay();
        
        // Attach event handlers
        if (!handlersAttached) {
            attachLoginHandlers();
            handlersAttached = true;
        }
        
        authInitialized = true;
        logMessage('[AUTH] Authentication system initialized');
    } catch (error) {
        console.error('[AUTH] Initialization error:', error);
        logMessage(`[AUTH ERROR] ${error.message}`);
        // Clear any partial state
        localStorage.removeItem('authState');
        eventBus.clearAuthState();
        
        // Try to update UI to logged-out state
        try {
            document.body.setAttribute('data-auth-state', 'logged-out');
            const loginForm = document.getElementById('login-form');
            const logoutBtn = document.getElementById('logout-btn');
            if (loginForm) loginForm.style.display = 'block';
            if (logoutBtn) logoutBtn.style.display = 'none';
        } catch (e) {
            console.error('Error updating UI after auth init failure:', e);
        }
    }
}

// Simple system info function
function showSystemInfo() {
    try {
        const authInfo = getAuthState();
        const appInfo = {
            name: window.APP_NAME || 'DevPages',
            version: window.APP_VERSION || '0.9.0',
            authState: authInfo ? (authInfo.isLoggedIn ? 'Logged In' : 'Logged Out') : 'Unknown',
            user: authInfo && authInfo.username ? authInfo.username : 'None',
            buildTime: window.BUILD_TIME || 'Unknown'
        };
        
        alert(`Application: ${appInfo.name} v${appInfo.version}\nAuth: ${appInfo.authState}\nUser: ${appInfo.user}\nBuild: ${appInfo.buildTime}`);
    } catch (e) {
        console.error('Error showing system info:', e);
        alert('Error retrieving system information');
    }
}

// Update attachLoginHandlers to prevent duplicate handlers
function attachLoginHandlers() {
    if (handlersAttached) {
        console.log('[AUTH] Handlers already attached, skipping');
        return;
    }

    logMessage('[AUTH] Attaching login handlers');

    // Handle form submission
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        logMessage('[AUTH] Found login form, attaching submit handler');

        // Remove any existing event listeners first
        const newLoginForm = loginForm.cloneNode(true);
        loginForm.parentNode.replaceChild(newLoginForm, loginForm);

        // Add form submit handler
        newLoginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            logMessage(`[AUTH] Login form submitted for user: ${username}`);
            
            // Use handleLogin directly
            handleLogin(username, password).then(success => {
                // Optionally update UI or provide feedback on failed login
                if (!success) {
                    // Maybe shake the form or show an error message
                    logMessage('[AUTH] Login failed, updating UI feedback');
                }
            });
        });

        logMessage('[AUTH] Login form submit handler attached successfully.');
    }

    // Attach logout button handler
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
        logMessage('[AUTH] Found logout button, attaching click handler');
        
        // Remove any existing event listeners first
        const newLogoutBtn = logoutBtn.cloneNode(true);
        logoutBtn.parentNode.replaceChild(newLogoutBtn, logoutBtn);
        
        // Add our click handler - use logout function directly
        newLogoutBtn.addEventListener('click', () => logout());
    }

    // Attach info button handler
    const infoBtn = document.getElementById('info-btn');
    if (infoBtn) {
        logMessage('[AUTH] Found info button, attaching click handler');
        const newInfoBtn = infoBtn.cloneNode(true);
        infoBtn.parentNode.replaceChild(newInfoBtn, infoBtn);
        newInfoBtn.addEventListener('click', showSystemInfo);
    }
    
    handlersAttached = true;
    logMessage('[AUTH] Login handlers attached successfully');
}

// Add function to handle logout confirmation
function confirmLogout() {
    return window.confirm('Are you sure you want to log out? Any unsaved changes will be lost.');
}

// Setup logout button with confirmation
export function setupLogoutButton() {
    const logoutBtn = document.getElementById('logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', async () => {
            if (confirmLogout()) {
                await logout();
            }
        });
    }
}

// Add a refresh auth function
export async function refreshAuth() {
    try {
        if (!authState.isLoggedIn || !authState.username || !authState.hashedPassword) {
            logMessage('[AUTH] Cannot refresh: Not logged in');
            return false;
        }
        
        // Check if token is still valid (with some margin)
        const now = Date.now();
        if (authState.expiresAt && authState.expiresAt > now + 60000) {
            // Token still valid for more than a minute, no need to refresh
            return true;
        }
        
        logMessage('[AUTH] Refreshing authentication token...');
        
        try {
            const response = await fetch('/api/auth/refresh', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Basic ${btoa(`${authState.username}:${authState.hashedPassword}`)}`
                },
                body: JSON.stringify({
                    username: authState.username
                })
            });
            
            if (response.status === 404) {
                // If the refresh endpoint doesn't exist, assume the token is still valid
                logMessage('[AUTH] Refresh endpoint not found, assuming token is still valid');
                
                // Extend token expiration by 30 minutes
                const newExpiry = now + 30 * 60 * 1000;
                updateAuthState({
                    ...authState,
                    expiresAt: newExpiry
                });
                
                return true;
            }
            
            if (!response.ok) {
                throw new Error(`Server returned ${response.status}: ${await response.text()}`);
            }
            
            const data = await response.json();
            
            if (data.token) {
                updateAuthState({
                    ...authState,
                    token: data.token,
                    expiresAt: now + (data.expiresIn || 3600) * 1000
                });
                
                logMessage('[AUTH] Authentication refreshed successfully');
                return true;
            } else {
                throw new Error('No token in refresh response');
            }
        } catch (error) {
            // For network errors or missing endpoints, assume token is still valid
            if (error.message.includes('Failed to fetch') || 
                error.message.includes('404') || 
                error.message.includes('not found')) {
                
                logMessage('[AUTH WARN] Auth refresh failed, but continuing: ' + error.message);
                
                // Extend token expiration by 30 minutes
                const newExpiry = now + 30 * 60 * 1000;
                updateAuthState({
                    ...authState,
                    expiresAt: newExpiry
                });
                
                return true;
            }
            
            throw error;
        }
    } catch (error) {
        logMessage(`[AUTH ERROR] ${error}`);
        return false;
    }
}

// Helper function to update auth state
function updateAuthState(newState) {
    // Update memory state
    Object.assign(authState, newState);
    
    // Save to localStorage
    saveAuthState();
    
    // Sync with eventBus
    if (newState.isLoggedIn) {
        eventBus.setAuthState({
            isAuthenticated: true,
            username: newState.username,
            token: newState.hashedPassword || newState.token,
            loginTime: newState.loginTime,
            expiresAt: newState.expiresAt
        });
    } else {
        eventBus.clearAuthState();
    }
}

// Init auth function for global use
export function initAuth() {
    logMessage('[AUTH] Initializing authentication system');
    
    // Define doLogin
    window.doLogin = (username, password) => {
        if (!username && !password) {
            username = document.getElementById('username')?.value || '';
            password = document.getElementById('password')?.value || '';
        }
        
        if (!username || !password) {
            logMessage('[AUTH ERROR] Username and password required');
            return false;
        }
        
        logMessage(`[AUTH] Login initiated for user: ${username}`);
        return handleLogin(username, password);
    };
    
    window.logoutUser = () => {
        logMessage('[AUTH] Logout initiated');
        return logout();
    };
    
    // Attach handlers FIRST
    attachLoginHandlers();
    
    // Restore login state (if any)
    restoreLoginState();
    
    // Retry mechanism for handlers
    setTimeout(() => {
        const loginBtn = document.getElementById('login-btn');
        if (loginBtn && !loginBtn._hasAuthHandler) {
            logMessage('[AUTH] Re-attaching login handlers as a precaution');
            attachLoginHandlers();
        }
    }, 1000);
}

// Export a function to check auth state consistency
export function reconcileAuthState() {
    const eventBusState = eventBus.getAuthState();
    const localState = authState;
    
    // Check for inconsistencies
    if (eventBusState.isAuthenticated !== localState.isLoggedIn ||
        eventBusState.username !== localState.username) {
        
        logMessage('[AUTH] Detected inconsistent auth state, reconciling...');
        
        if (localState.isLoggedIn) {
            // Update event bus with local state
            eventBus.setAuthState({
                isAuthenticated: true,
                username: localState.username,
                token: localState.hashedPassword,
                loginTime: localState.loginTime,
                expiresAt: localState.expiresAt
            });
        } else {
            // Clear both states
            Object.assign(authState, {
                isLoggedIn: false,
                username: '',
                hashedPassword: '',
                loginTime: null,
                expiresAt: null
            });
            eventBus.clearAuthState();
        }
        
        // Update UI
        updateAuthDisplay();
    }
}

// Check auth state consistency periodically
setInterval(reconcileAuthState, 30000); // Every 30 seconds

// Initialize dependencies immediately
initAuthDependencies().catch(error => {
    console.error('Error initializing auth.js:', error);
    logMessage('[AUTH ERROR] Failed to initialize auth.js', 'error');
});

console.warn('auth.js is deprecated and will be removed in a future version. Please use authService.js instead.');

// Add this function in auth.js
function cleanUrlAfterLogin() {
    try {
        // Remove sensitive parameters from URL
        const url = new URL(window.location.href);
        if (url.searchParams.has('username') || url.searchParams.has('password')) {
            url.searchParams.delete('username');
            url.searchParams.delete('password');
            window.history.replaceState({}, document.title, url.toString());
            logMessage('[AUTH] Cleaned sensitive parameters from URL');
        }
    } catch (error) {
        logMessage(`[AUTH ERROR] Error cleaning URL: ${error.message}`);
    }
}

