/**
 * View System Reset and Fix
 * This script resolves conflicts between multiple view management systems
 */

// Log function for debugging
function log(message) {
  console.log(`[VIEW FIX] ${message}`);
}

// Main fix function
export function fixViewSystem() {
  log('Starting view system repair...');
  
  // Get all required elements
  const container = document.getElementById('content');
  const editor = document.getElementById('md-editor');
  const preview = document.getElementById('md-preview');
  
  // Buttons
  const codeBtn = document.getElementById('code-view');
  const splitBtn = document.getElementById('split-view');
  const previewBtn = document.getElementById('preview-view');
  
  // Check if elements exist
  if (!container || !editor || !preview) {
    console.error('[VIEW FIX] Critical elements missing!');
    return false;
  }
  
  log('Found all required elements');
  
  // STEP 1: Clear existing event handlers by cloning and replacing buttons
  if (codeBtn) {
    const newCodeBtn = codeBtn.cloneNode(true);
    codeBtn.parentNode.replaceChild(newCodeBtn, codeBtn);
    log('Replaced code button to clear handlers');
  }
  
  if (splitBtn) {
    const newSplitBtn = splitBtn.cloneNode(true);
    splitBtn.parentNode.replaceChild(newSplitBtn, splitBtn);
    log('Replaced split button to clear handlers');
  }
  
  if (previewBtn) {
    const newPreviewBtn = previewBtn.cloneNode(true);
    previewBtn.parentNode.replaceChild(newPreviewBtn, previewBtn);
    log('Replaced preview button to clear handlers');
  }
  
  // Get fresh references after replacing
  const freshCodeBtn = document.getElementById('code-view');
  const freshSplitBtn = document.getElementById('split-view');
  const freshPreviewBtn = document.getElementById('preview-view');
  
  // STEP 2: Create a single clean switchView function
  function switchView(mode) {
    log(`Switching to ${mode} view`);
    
    // Clear inline styles that might interfere
    container.style = '';
    editor.style = '';
    preview.style = '';
    
    // Set container display to flex
    container.style.display = 'flex';
    
    // Remove existing view classes
    container.classList.remove('code-view', 'preview-view', 'split-view');
    
    // Add the new view class
    container.classList.add(`${mode}-view`);
    
    // Update button active states
    document.querySelectorAll('.view-controls button').forEach(btn => {
      btn.classList.remove('active');
    });
    
    // Set active button
    const activeButton = document.getElementById(`${mode}-view`);
    if (activeButton) {
      activeButton.classList.add('active');
    }
    
    // Save the current view mode
    localStorage.setItem('viewMode', mode);
    
    // Dispatch event for other components
    document.dispatchEvent(new CustomEvent('view:changed', { 
      detail: { mode } 
    }));
    
    log(`View switched to ${mode}`);
  }
  
  // STEP 3: Attach new event listeners
  if (freshCodeBtn) {
    freshCodeBtn.addEventListener('click', function(e) {
      log('Code button clicked');
      switchView('code');
      e.preventDefault();
    });
  }
  
  if (freshSplitBtn) {
    freshSplitBtn.addEventListener('click', function(e) {
      log('Split button clicked');
      switchView('split');
      e.preventDefault();
    });
  }
  
  if (freshPreviewBtn) {
    freshPreviewBtn.addEventListener('click', function(e) {
      log('Preview button clicked');
      switchView('preview');
      e.preventDefault();
    });
  }
  
  // STEP 4: Apply the saved view or default to split
  const savedMode = localStorage.getItem('viewMode') || 'split';
  log(`Setting initial view to: ${savedMode}`);
  switchView(savedMode);
  
  // STEP 5: Make switchView available globally for other components
  window.switchView = switchView;
  
  log('View system repair complete');
  return true;
}

// Call the fix automatically when this script is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Wait a moment to ensure all other scripts have run
  setTimeout(fixViewSystem, 100);
});

// Also make it available globally
window.fixViewSystemComplete = fixViewSystem; 