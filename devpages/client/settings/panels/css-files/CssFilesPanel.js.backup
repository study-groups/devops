/**
 * CSS Files Panel - Main panel controller
 * Manages CSS files and provides comprehensive CSS debugging capabilities
 */

import { dispatch } from '/client/messaging/messageQueue.js';
import { ActionTypes } from '/client/messaging/actionTypes.js';
import { appStore } from '/client/appState.js';
import { settingsSectionRegistry } from '../../core/settingsSectionRegistry.js';

// Import modular components
import { CssStateManager } from './core/CssStateManager.js';
import { CssScanner } from './utils/CssScanner.js';
import { CssFileManager } from './utils/CssFileManager.js';
import { FileListRenderer } from './renderers/FileListRenderer.js';
import { CssDebugger } from './debug/CssDebugger.js';
import { CssAnalyzer } from './analysis/CssAnalyzer.js';
import { CssConflictDetector } from './analysis/CssConflictDetector.js';

class CssFilesPanel {
  constructor(containerElement) {
    this.containerElement = containerElement;
    
    // Initialize modular components
    this.stateManager = new CssStateManager();
    this.scanner = new CssScanner();
    this.fileManager = new CssFileManager();
    this.renderer = new FileListRenderer();
    this.debugger = new CssDebugger();
    this.analyzer = new CssAnalyzer();
    this.conflictDetector = new CssConflictDetector();
    
    // Current data
    this.cssFiles = new Map();
    this.categories = { theme: new Map(), system: new Map(), other: new Map() };
    
    this.init();
  }

  async init() {
    // Initialize state manager
    this.stateManager.initialize();
    
    // Initialize scanner
    await this.scanner.initialize();
    
    // Setup state listeners
    this.setupStateListeners();
    
    // Initial scan and render
    this.refresh();
  }

  /**
   * Setup state listeners for reactive updates
   */
  setupStateListeners() {
    this.stateManager.on('sectionsChanged', () => {
      this.updateCollapsibleSections();
    });
  }

  /**
   * Refresh CSS files data and re-render
   */
  refresh() {
    // Scan for CSS files
    this.cssFiles = this.scanner.scanLoadedCssFiles();
    
    // Categorize files
    this.categories = this.scanner.categorizeCssFiles(this.cssFiles);
    
    // Update file manager
    this.fileManager.setCssFiles(this.cssFiles);
    
    // Re-render
    this.render();
  }

  /**
   * Refresh CSS files (alias for refresh)
   */
  refreshCssFiles() {
    this.refresh();
  }

  /**
   * Main render function - rebuilds the panel content
   */
  render() {
    const stats = this.scanner.generateStats(this.cssFiles);
    const categories = this.scanner.categorizeCssFiles(this.cssFiles);

    this.containerElement.innerHTML = `
        <div class="css-panel-content">
            ${this.renderer.renderSummarySection(stats)}
            ${this.renderer.renderCategorizedFileList(categories)}
        </div>
        ${this.renderer.renderCssModal()}
    `;

    this.setupEventListeners();
  }

  /**
   * Sets up event listeners for the panel
   */
  setupEventListeners() {
    this.renderer.setupEventListeners(this.containerElement, {
      onRefresh: () => this.refreshCssFiles(),
      onToggleFile: (href, enabled) => this.toggleCssFile(href, enabled),
      onViewFile: (href) => this.viewCssFile(href),
      onDebugFile: (href) => this.debugCssFile(href)
    });
  }

  /**
   * Toggles a CSS file's disabled state
   */
  toggleCssFile(href, enabled) {
    const success = this.fileManager.toggleCssFile(href, enabled);
    if (success) {
      // Visually update the item
      const itemElement = this.containerElement.querySelector(`.stylesheet-item[data-href="${href}"]`);
      if (itemElement) {
        itemElement.classList.toggle('stylesheet-disabled', !enabled);
      }
      
      // Notify HTML renderer if it exists
      this.notifyHtmlRenderer('cssToggled', { href, enabled });
    }
  }

  /**
   * View CSS file content
   */
  async viewCssFile(href) {
    try {
      const content = await this.fileManager.getCssFileContent(href);
      const fileName = this.getFileNameFromHref(href);
      this.showCssModal(content, `CSS File: ${fileName}`);
    } catch (error) {
      console.error('Error loading CSS file:', error);
    }
  }

  /**
   * Show CSS content in a modal
   */
  showCssModal(content, title) {
    const modal = this.renderer.createModal(title, content);
    document.body.appendChild(modal);
    
    const closeModal = () => {
      document.body.removeChild(modal);
      document.removeEventListener('keydown', handleEscape);
    };
    
    function handleEscape(e) {
      if (e.key === 'Escape') {
        closeModal();
      }
    }
    
    modal.querySelector('.close-modal').addEventListener('click', closeModal);
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeModal();
    });
    document.addEventListener('keydown', handleEscape);
  }

  /**
   * Debug CSS file - opens comprehensive debug panel
   */
  debugCssFile(href) {
    this.debugger.openDebugPanel(href, {
      analyzer: this.analyzer,
      conflictDetector: this.conflictDetector,
      onNotification: (message, type) => this.showNotification(message, type)
    });
  }

  /**
   * Update collapsible sections state
   */
  updateCollapsibleSections() {
    const collapsedSections = this.stateManager.getCollapsedSections();
    
    // Update UI based on collapsed state
    Object.entries(collapsedSections).forEach(([sectionId, isCollapsed]) => {
      const section = this.containerElement.querySelector(`[data-section="${sectionId}"]`);
      if (section) {
        section.classList.toggle('collapsed', isCollapsed);
      }
    });
  }

  /**
   * Notify HTML renderer about CSS changes
   */
  notifyHtmlRenderer(event, data) {
    // Dispatch custom event that HTML renderer can listen to
    const customEvent = new CustomEvent('css-files-panel:change', {
      detail: { event, data }
    });
    document.dispatchEvent(customEvent);
    
    console.log('[CssFilesPanel] Notified HTML renderer:', event, data);
  }

  /**
   * Show notification to user
   */
  showNotification(message, type = 'info') {
    // Create a simple notification system
    const notification = document.createElement('div');
    notification.className = `css-notification css-notification-${type}`;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'};
      color: white;
      padding: 12px 16px;
      border-radius: 6px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10002;
      font-family: var(--font-family-sans, system-ui);
      max-width: 300px;
      animation: slideInRight 0.3s ease-out;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => {
          if (notification.parentElement) {
            notification.remove();
          }
        }, 300);
      }
    }, 3000);
  }

  /**
   * Get filename from href
   */
  getFileNameFromHref(href) {
    if (href.startsWith('<style')) {
      return href;
    }
    try {
      const url = new URL(href);
      return url.pathname.split('/').pop() || 'unknown.css';
    } catch (e) {
      return href.split('/').pop() || 'unknown.css';
    }
  }

  /**
   * Cleanup resources and destroy the panel
   */
  destroy() {
    console.log('[CssFilesPanel] Destroying...');
    
    // Cleanup state manager
    if (this.stateManager) {
      this.stateManager.destroy();
    }
    
    // Cleanup debugger
    if (this.debugger) {
      this.debugger.destroy();
    }
    
    // Clear references
    this.cssFiles.clear();
    this.categories = { theme: new Map(), system: new Map(), other: new Map() };
    
    console.log('[CssFilesPanel] Destroyed');
  }
}

// Register this panel in the settings section registry
settingsSectionRegistry.register({
  id: 'css-files',
  title: 'CSS Files',
  component: CssFilesPanel,
  icon: 'ðŸŽ¨',
  order: 2
});

export default CssFilesPanel; 