diff --git a/devpages/client/appState.js b/devpages/client/appState.js
index c21b73c..6fcb343 100644
--- a/devpages/client/appState.js
+++ b/devpages/client/appState.js
@@ -1,108 +1,61 @@
 /**
- * appState.js
- * Centralized application state management using StateKit.
+ * client/state/appState.js
+ * Centralized application state management using statekit.
  */
-import { createState } from './statekit/statekit.js';
 
-// --- LocalStorage Keys ---
-const LS_VIEW_MODE_KEY = 'viewMode';
-const LS_LOG_VISIBLE_KEY = 'logVisible';
-const LS_LOG_HEIGHT_KEY = 'logHeight'; // Keep track of this too
-
-// --- Helper to safely parse JSON from localStorage ---
-function safeGetLocalStorage(key, defaultValue) {
-    try {
-        const storedValue = localStorage.getItem(key);
-        if (storedValue === null) {
-            // console.debug(`[AppState] localStorage key "${key}" not found, using default:`, defaultValue);
-            return defaultValue;
-        }
-        // Only parse if it looks like JSON, otherwise treat as string/primitive
-        if (storedValue.startsWith('{') || storedValue.startsWith('[')) {
-             return JSON.parse(storedValue);
-        }
-        // Handle simple boolean strings explicitly
-        if (storedValue === 'true') return true;
-        if (storedValue === 'false') return false;
-        // Handle numbers
-        const num = parseFloat(storedValue);
-        if (!isNaN(num)) return num;
-        
-        // Return as string if not parsed
-        return storedValue;
-    } catch (error) {
-        console.warn(`[AppState] Error reading or parsing localStorage key "${key}". Using default.`, error);
-        return defaultValue;
-    }
-}
-
-
-// --- Initial Application State Structure ---
-const initialState = {
-    // Authentication Status
-    auth: {
-        isLoggedIn: false, 
-        user: null, 
-        token: null, 
-        tokenExpiresAt: null, 
-        authChecked: false, 
-        isLoading: false, 
-        error: null, 
-    },
-
-    // UI State (Now managed here, reads from localStorage)
-    ui: {
-       viewMode: safeGetLocalStorage(LS_VIEW_MODE_KEY, 'preview'), // Default to 'preview'
-       logVisible: safeGetLocalStorage(LS_LOG_VISIBLE_KEY, false), // Default to false
-       logHeight: safeGetLocalStorage(LS_LOG_HEIGHT_KEY, 120), // Default height
-       // Add other UI states here if needed
+import { createState } from '/client/statekit/statekit.js';
+
+// Define the initial shape of the application state
+const initialAppState = {
+  auth: {
+    isInitializing: true, // Track auth initialization state
+    isAuthenticated: false,
+    user: null, // e.g., { username: '...', token: '...', roles: [] }
+    error: null,
+  },
+  ui: {
+    // Global UI states, e.g., current theme, loading indicators
+    theme: 'default', // Example
+    isLoading: false, // Keep general loading state? Or manage per feature?
+  },
+  settingsPanel: {
+    enabled: false,
+    position: { x: 50, y: 50 },
+    size: { width: 380, height: 550 },
+    collapsedSections: {},
+    // Add specific settings here as needed, e.g.:
+    // logLevel: 'info'
+  },
+  editor: {
+    // Example placeholder
+    content: '', // Note: fileManager currently calls setContent directly. Refactor later?
+    dirty: false,
+  },
+  // --- Refactored File System State ---
+  file: { // Renamed from 'files' for clarity and consistency
+    isInitialized: false,       // Tracks if file manager has run initial load
+    isLoading: false,           // True when loading listing or file content
+    isSaving: false,            // True during save operation
+    topLevelDirectory: null,    // e.g., 'gridranger' or null if none selected
+    currentRelativePath: null,  // e.g., 'subdir' or null if at top level
+    currentFile: null,          // e.g., 'notes.md' or null if none selected
+    currentListing: {           // Contents of the current directory
+        dirs: [],
+        files: []
     },
-
-    // Other top-level state sections can be added here as needed
-    file: { // <<< UNCOMMENTED/ADDED File State Slice >>>
-        currentFile: null, // Path of the currently loaded file
-        currentDir: null, // Top-level directory (redundant? maybe keep synced)
-        currentRelativePath: null, // Relative path within top-level dir
-        // Potentially add other file-related state like isDirty, etc.
-    },
-    // editor: { ... },
-    // settings: { ... },
+    availableTopLevelDirs: [], // List of available root directories (e.g., ['user1', 'shared'])
+    error: null,                // Holds error messages related to file operations
+    // Consider adding current file content or front matter here if needed by many components,
+    // otherwise keep content primarily managed by the editor module.
+  }
+  // --- End Refactored File System State ---
 };
 
-// --- Create the Central State Instance ---
-export const appState = createState(initialState);
-
-// --- Persistence Subscriber ---
-// Subscribe to state changes specifically to persist the UI slice.
-appState.subscribe((newState, prevState) => {
-    // Check if the UI slice *actually* changed to avoid unnecessary writes
-    if (newState.ui !== prevState.ui) {
-        // console.debug('[AppState Persistence] UI state changed, saving to localStorage:', newState.ui);
-        try {
-            // Persist relevant UI state items individually
-            if (newState.ui.viewMode !== prevState.ui.viewMode) {
-                localStorage.setItem(LS_VIEW_MODE_KEY, newState.ui.viewMode);
-            }
-            if (newState.ui.logVisible !== prevState.ui.logVisible) {
-                 localStorage.setItem(LS_LOG_VISIBLE_KEY, newState.ui.logVisible.toString());
-            }
-            if (newState.ui.logHeight !== prevState.ui.logHeight) {
-                 localStorage.setItem(LS_LOG_HEIGHT_KEY, newState.ui.logHeight.toString());
-            }
-        } catch (error) {
-            console.error('[AppState Persistence] Failed to save UI state to localStorage:', error);
-        }
-    }
-});
-
-
-// --- Optional: Add Debugging Listener ---
-// appState.subscribe((newState, prevState) => {
-//    console.log('[AppState Change]', { prevState, newState });
-// });
+// Create the application state store instance
+export const appStore = createState(initialAppState);
 
-console.log('[AppState] Central state initialized with state:', appState.getState());
+// Export state slices or selectors if needed for convenience
+// Example selector:
+// export const selectIsAuthenticated = derived(appStore, $state => $state.auth.isAuthenticated);
 
-// Note: The old AppStateManager class and its event listeners/dispatchers are removed.
-// Modules previously relying on `app:stateChange` or specific states like `APP_STATES.LOGGED_IN`
-// will need to be refactored to subscribe to `appState.auth.isLoggedIn`, `appState.auth.authChecked`, etc.
\ No newline at end of file
+console.log('[AppState] Central store initialized.');
\ No newline at end of file
