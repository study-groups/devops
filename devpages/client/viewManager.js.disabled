import { logMessage } from './log/index.js';

// Keep track of initialization state
let initialized = false;

/**
 * Set the current view mode
 * @param {string} mode - The view mode: 'code', 'split', or 'preview'
 */
export function setView(mode) {
    // Validate mode
    if (!['code', 'split', 'preview'].includes(mode)) {
        console.error(`Invalid view mode: ${mode}`);
        return;
    }
    
    // Get required elements
    const container = document.getElementById('content');
    const editor = document.getElementById('md-editor');
    const preview = document.getElementById('md-preview');
    
    if (!container || !editor || !preview) {
        console.error('Required view elements not found');
        return;
    }
    
    // Set view classes
    container.classList.remove('code-view', 'split-view', 'preview-view');
    container.classList.add(`${mode}-view`);
    
    // Clear any inline styles
    container.style = '';
    editor.style = '';
    preview.style = '';
    
    // Add specific styles for split view to ensure it works
    if (mode === 'split') {
        container.style.display = 'flex';
        container.style.flexDirection = 'row';
        editor.style.width = '50%';
        editor.style.display = 'block';
        preview.style.width = '50%';
        preview.style.display = 'block';
    }
    
    // Set active button state
    document.querySelectorAll('.view-controls button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    const activeButton = document.getElementById(`${mode}-view`);
    if (activeButton) {
        activeButton.classList.add('active');
    }
    
    // Save view mode to localStorage
    localStorage.setItem('viewMode', mode);
    
    // Notify other components
    document.dispatchEvent(new CustomEvent('view:changed', {
        detail: { mode }
    }));
    
    logMessage(`View changed to ${mode}`);
}

/**
 * Replace a button with a clone to remove all event listeners
 */
function replaceButton(button) {
    if (!button) return null;
    const clone = button.cloneNode(true);
    button.parentNode.replaceChild(clone, button);
    return clone;
}

/**
 * Initialize view controls
 */
export function initViewControls() {
    // Prevent multiple initializations
    if (initialized) {
        logMessage('View controls already initialized, skipping');
        return;
    }
    
    logMessage('Initializing view controls');
    
    // Get buttons
    const codeBtn = document.getElementById('code-view');
    const splitBtn = document.getElementById('split-view');
    const previewBtn = document.getElementById('preview-view');
    
    // Replace buttons with clones to remove any existing event handlers
    const newCodeBtn = replaceButton(codeBtn);
    const newSplitBtn = replaceButton(splitBtn);
    const newPreviewBtn = replaceButton(previewBtn);
    
    // Set event handlers with event delegation on the parent
    const viewControls = document.querySelector('.view-controls');
    if (viewControls) {
        // Remove any existing listeners by cloning
        const newViewControls = viewControls.cloneNode(true);
        viewControls.parentNode.replaceChild(newViewControls, viewControls);
        
        // Add the event listener to the new element
        newViewControls.addEventListener('click', (e) => {
            const button = e.target.closest('button');
            if (!button) return;
            
            if (button.id === 'code-view') setView('code');
            else if (button.id === 'split-view') setView('split');
            else if (button.id === 'preview-view') setView('preview');
            
            // Prevent default and stop propagation
            e.preventDefault();
            e.stopPropagation();
        });
        
        logMessage('View controls event delegation set up');
    } else {
        // Fallback to direct button handlers if parent not found
        if (newCodeBtn) newCodeBtn.addEventListener('click', () => setView('code'));
        if (newSplitBtn) newSplitBtn.addEventListener('click', () => setView('split'));
        if (newPreviewBtn) newPreviewBtn.addEventListener('click', () => setView('preview'));
        
        logMessage('View controls direct handlers set up');
    }
    
    // Apply saved view mode
    const savedMode = localStorage.getItem('viewMode') || 'split';
    setView(savedMode);
    
    // Add keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.altKey) {
            if (e.key === '1') {
                setView('code');
                e.preventDefault();
            } else if (e.key === '2') {
                setView('split');
                e.preventDefault();
            } else if (e.key === '3') {
                setView('preview');
                e.preventDefault();
            }
        }
    });
    
    // Make function available globally for emergency fixes
    window.setView = setView;
    
    initialized = true;
    logMessage('View controls initialization complete');
}

// Initialize as soon as possible
document.addEventListener('DOMContentLoaded', () => {
    // Use setTimeout to ensure this runs after any competing initialization
    setTimeout(() => {
        initViewControls();
    }, 100);
});

// Also run immediately if document is already loaded
if (document.readyState === 'interactive' || document.readyState === 'complete') {
    initViewControls();
}

// Export functions
export { setView, initViewControls };
